<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-03-03T19:43:33-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">MATH 1120</title><subtitle>A guide for students.</subtitle><author><name>Betty Love</name><email>blove@unomaha.edu</email></author><entry><title type="html">Spheres in Bricklayer</title><link href="http://localhost:4000/spheres/" rel="alternate" type="text/html" title="Spheres in Bricklayer" /><published>2019-03-01T00:00:00-06:00</published><updated>2019-03-01T00:00:00-06:00</updated><id>http://localhost:4000/spheres</id><content type="html" xml:base="http://localhost:4000/spheres/">&lt;h4 class=&quot;no_toc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#sphere-functions-in-bricklayer-level-4&quot; id=&quot;markdown-toc-sphere-functions-in-bricklayer-level-4&quot;&gt;Sphere functions in Bricklayer Level 4&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#bricklayer-sphere-function&quot; id=&quot;markdown-toc-bricklayer-sphere-function&quot;&gt;Bricklayer &lt;em&gt;sphere&lt;/em&gt; function&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#list-of-colors&quot; id=&quot;markdown-toc-list-of-colors&quot;&gt;List of colors?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bricklayer-hollowsphere-function&quot; id=&quot;markdown-toc-bricklayer-hollowsphere-function&quot;&gt;Bricklayer &lt;em&gt;hollowSphere&lt;/em&gt; function&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post we’ll explore spheres in Bricklayer Level 4.  For an introduction to programming in the  Level 4, check out &lt;a href=&quot;/getting-started-with-level4&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where you see this icon,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl icon&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;click on it to download the associated bricklayer program.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;sphere-functions-in-bricklayer-level-4&quot;&gt;Sphere functions in Bricklayer Level 4&lt;/h3&gt;

&lt;p&gt;Bricklayer has two sphere functions: &lt;em&gt;sphere&lt;/em&gt; and &lt;em&gt;hollowSphere&lt;/em&gt;. Official documentation on these and other Level-4 functions is available at &lt;a href=&quot;https://bricklayer.org&quot;&gt;bricklayer.org&lt;/a&gt; (Apps -&amp;gt; Bricklayer -&amp;gt; Level 4 - Document).  In this post, we’ll start with the &lt;em&gt;sphere&lt;/em&gt; function.&lt;/p&gt;

&lt;h4 id=&quot;bricklayer-sphere-function&quot;&gt;Bricklayer &lt;em&gt;sphere&lt;/em&gt; function&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;sphere&lt;/em&gt; function produces a sphere (duh!), i.e., a ball.  This is a 3D artifact. To create a sphere, we need to know three things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;how big it should be&lt;/li&gt;
  &lt;li&gt;what color(s) it should be&lt;/li&gt;
  &lt;li&gt;where it should be&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These three things define the parameters for the &lt;em&gt;sphere&lt;/em&gt; function. Specifically, the parameters are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;radius&lt;/li&gt;
  &lt;li&gt;a list of colors, written as [color1,color2,etc]&lt;/li&gt;
  &lt;li&gt;the center, written as a location in 3D space&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;em&gt;sphere&lt;/em&gt; command looks like:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere radius [color1,color2,etc] (x,y,z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The following command creates a blue sphere with radius 10 with center (15,15,15):
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere01.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 10 [BLUE] (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere01.png&quot; alt=&quot;Blue sphere&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Let’s put three side-by-side (radii 5, 10, and 15) for perspective.
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere02.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 5  [BLUE] (10,20,20);
sphere 10 [BLUE] (30,20,20);
sphere 15 [BLUE] (60,20,20);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere02.png&quot; alt=&quot;Three blue spheres&quot; /&gt;
    
&lt;/figure&gt;

&lt;h4 id=&quot;list-of-colors&quot;&gt;List of colors?&lt;/h4&gt;
&lt;p&gt;Let’s explore what happens when we have more than one color in our list of colors. I’ll change up our three spheres as follows. &lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere03.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 5  [BLUE,YELLOW] (10,20,20);
sphere 10 [RED, GREEN] (30,20,20);
sphere 15 [PINK, VIOLET] (60,20,20);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere03.png&quot; alt=&quot;Three bi-color spheres&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;But we’re not limited to just two colors.  You can include as many as you’d like.  Here’s one with three colors. &lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere04.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 10 [RED,ORANGE,YELLOW] (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere04.png&quot; alt=&quot;A red, orange, and yellow sphere&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;At this point if you’ve been running the .bl files yourself, you may have noticed that as your artifacts include more bricks, it can take longer for your computer to display them. It is easy to generate a lot of bricks when creating spheres.  In fact, we can look at the output in the bricklayer console window to see how many bricks are in an artifact.  The screenshot below shows how to look for this (first scroll to the bottom of the console window, then up until you see this part).  Notice that our red, orange, and yellow sphere is made up of 4,945 bricks!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere05.png&quot; alt=&quot;A red, orange, and yellow sphere&quot; /&gt;
    
&lt;/figure&gt;

&lt;h4 id=&quot;bricklayer-hollowsphere-function&quot;&gt;Bricklayer &lt;em&gt;hollowSphere&lt;/em&gt; function&lt;/h4&gt;
&lt;p&gt;The &lt;em&gt;hollowSphere&lt;/em&gt; function provides a way to create the same look as the &lt;em&gt;sphere&lt;/em&gt; command without all the inner bricks that one cannot see.  The parameters are the same except for one additional parameter for &lt;em&gt;hollowSphere&lt;/em&gt; to indicate the thickness of the surface of the sphere.  The maximum value for this is 10 and it yields a sphere that looks exactly like the output from the &lt;em&gt;sphere&lt;/em&gt; command, but with the unseen bricks deleted.  This allows us to create larger spheres without slowing down the computer too much.&lt;/p&gt;

&lt;p&gt;The general form of the &lt;em&gt;hollowSphere&lt;/em&gt; command is:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hollowSphere radius thickness [colors] location;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I’ll create a sphere that looks like the previous one using &lt;em&gt;hollowSphere&lt;/em&gt; with a thickness of 10. 
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere05.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hollowSphere 10 10 [RED,ORANGE,YELLOW] (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere06.png&quot; alt=&quot;Hollow sphere with thickness 10&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Now let’s check the bricklayer console to see how many bricks are in this one.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere07.png&quot; alt=&quot;A red, orange, and yellow sphere&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;2392 bricks in the hollow sphere vs. 4945 in the solid sphere.  Using &lt;em&gt;hollowSphere&lt;/em&gt; allows us to create larger spheres with no change in appearance from the outside of the sphere.&lt;/p&gt;

&lt;p&gt;What if we used a smaller value for the thickness?  Let’s try 5! &lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere06.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hollowSphere 10 5 [RED,ORANGE,YELLOW] (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere08.png&quot; alt=&quot;Hollow sphere with thickness 5&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The outside of the sphere is not solid now.  Let’s try thickness = 1. 
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere07.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hollowSphere 10 1 [RED,ORANGE,YELLOW] (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere09.png&quot; alt=&quot;Hollow sphere with thickness 5&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;As the thickness decreases, the number of visible bricks on the outside of the sphere also decreases.&lt;/p&gt;</content><author><name>Betty Love</name></author><category term="level4," /><category term="3D," /><category term="sphere" /><summary type="html">Topics on this page</summary></entry><entry><title type="html">Getting Started with Programming in the Bricklayer App</title><link href="http://localhost:4000/getting-started-with-bricklayer/" rel="alternate" type="text/html" title="Getting Started with Programming in the Bricklayer App" /><published>2019-02-21T00:00:00-06:00</published><updated>2019-02-21T00:00:00-06:00</updated><id>http://localhost:4000/getting-started-with-bricklayer</id><content type="html" xml:base="http://localhost:4000/getting-started-with-bricklayer/">&lt;h4 class=&quot;no_toc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-the-bricklayer-app-and-an-artifact-viewer&quot; id=&quot;markdown-toc-installing-the-bricklayer-app-and-an-artifact-viewer&quot;&gt;Installing the Bricklayer App and an Artifact Viewer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bricklayer-app-environment&quot; id=&quot;markdown-toc-bricklayer-app-environment&quot;&gt;Bricklayer app environment&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#three-elements-of-every-bricklayer&quot; id=&quot;markdown-toc-three-elements-of-every-bricklayer&quot;&gt;Three elements of every Bricklayer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#save-your-program&quot; id=&quot;markdown-toc-save-your-program&quot;&gt;Save your program!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#semicolons&quot; id=&quot;markdown-toc-semicolons&quot;&gt;Semicolons!!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-function-calls&quot; id=&quot;markdown-toc-adding-function-calls&quot;&gt;Adding function calls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-your-bricklayer-lite-program&quot; id=&quot;markdown-toc-running-your-bricklayer-lite-program&quot;&gt;Running your Bricklayer-Lite program&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#errorsthey-are-unavoidable&quot; id=&quot;markdown-toc-errorsthey-are-unavoidable&quot;&gt;Errors—they are unavoidable!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One can write Bricklayer programs in one of two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bricklayer-Lite is a web app available at &lt;a href=&quot;https://bricklayer.org&quot;&gt;bricklayer.org&lt;/a&gt; that provides a gentle introduction to bricklayer programming. Programs are created by interactively selecting puzzle pieces that represent program elements and connecting them. This is all done in a browser window; hence no software download is required.  Only two-dimensional artifacts can be created with Bricklayer-Lite. &lt;a href=&quot;/getting-started-with-bricklayer-lite&quot;&gt;This post&lt;/a&gt; discusses how to get started with Bricklayer-Lite.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Bricklayer app is a text-based programming environment and any Bricklayer program can be created and run in the Bricklayer app.  The app must be downloaded and installed on your computer. Versions are available for mac and windows. This post will focus on getting started with programming in the Bricklayer app.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;installing-the-bricklayer-app-and-an-artifact-viewer&quot;&gt;Installing the Bricklayer App and an Artifact Viewer&lt;/h3&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://bricklayer.org&quot;&gt;bricklayer.org&lt;/a&gt; and choose Apps -&amp;gt; Bricklayer -&amp;gt; Windows Download (or Mac OS Download).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-app/bricklayer-app01.png&quot; alt=&quot;Download Bricklayer&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;You will need to download and install the Bricklayer IDE as well as either LDD (LEGO Digital Designer) or LDraw.  The latter two are apps that Bricklayer uses to display artifacts created in a Bricklayer program. You will most likely need administrator access to install LDD or LDraw.&lt;/p&gt;

&lt;p&gt;We recommend adding the Bricklayer app icon to your dock for easy access.&lt;/p&gt;

&lt;h3 id=&quot;bricklayer-app-environment&quot;&gt;Bricklayer app environment&lt;/h3&gt;

&lt;p&gt;The Bricklayer app window consists of two panes: one for your bricklayer program and one to view system (console) output when you execute your program.  You’ll spend 99% of your time in the programming pane.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-app/bricklayer-app02.png&quot; alt=&quot;Bricklayer Window&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;You are ready to start typing your program.&lt;/p&gt;

&lt;h3 id=&quot;three-elements-of-every-bricklayer&quot;&gt;Three elements of every Bricklayer&lt;/h3&gt;

&lt;p&gt;Every Bricklayer program contains the following three elements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;open Level_n&lt;/em&gt; statement - the “n” should be replaced with a level number. The number you choose depends on the Bricklayer functions you’d like to use in your program and what level they are in. Documentation for each of the five levels is available at &lt;a href=&quot;https://bricklayer.org&quot;&gt;bricklayer.org&lt;/a&gt;.  Select Apps -&amp;gt; Bricklayer -&amp;gt; “Level n - Document” for Level x documentation.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-app/bricklayer-app03.png&quot; alt=&quot;Bricklayer documentation&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;For this example, I will use Level 3 functions, so will start my bricklayer program with the statement;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   open Level_3;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that Bricklayer distinguishes between upper and lower case characters.  So if you type&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   Open Level_3;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   open level_3;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;your program will not run.  Also note the semicolon at the end of the statement.  You must include this or, again, your program will not run.&lt;/p&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;&lt;em&gt;build2D (m,n)&lt;/em&gt; statement - this command tells Bricklayer the dimensions of the virtual space you want to work in; m is the number of rows and n is the number of columns.  It should be at least as large as the artifact you plan to build.  I want to build a 32x32 work space, so will add the following statement to my program:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   build2D (32,32);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Again note that case is important. Both&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   Build2D (32,32);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;and&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   build2d (32,32);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;will cause errors and your program will not run.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;&lt;em&gt;show2D “whatever”&lt;/em&gt; statement - the third command that is in every Bricklayer program in Levels 1 through 3 is the &lt;em&gt;show2D&lt;/em&gt; command.  It is also the last command/statement.  “whatever” is a name that you make up for the artifact that you’re creating. You can place any sequence of characters that you choose between the double quote marks.  Note that you must keep the quotes around this sequence of characters. The name you choose has no effect on how the program runs or the artifact that it generates.  I’ll use “demo” for this program, so will add the following line to my file:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   show2D &quot;demo&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;save-your-program&quot;&gt;Save your program!&lt;/h3&gt;
&lt;p&gt;You should save your program often so that you don’t lose your work in case the power goes out or your computer decides to be weird.  You want to save your bricklayer code with a &lt;em&gt;.bl&lt;/em&gt; extension.  The .bl tells your computer that this file is a bricklayer file.  Choose File -&amp;gt; Save from the Bricklayer menu or use your computer’s shortcut key combination (Command + s for mac; Control + s for windows).  It’s a good idea to stick with alphabetic and numeric characters in your file name.  Avoid spaces.  The hyphen or underscore characters are good choices too to help make the file name easily readable if it’s long.  I’ve saved my file as &lt;em&gt;demo.bl&lt;/em&gt;. Following is a snippet from the Bricklayer window.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-app/bricklayer-app04.png&quot; alt=&quot;Bricklayer Program 0&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Note that the blank lines are unnecessary, but are used to make code more easily readable.  The large number of lines between the build2D and show2D commands just indicate that I’m going to add more code there.&lt;/p&gt;

&lt;h3 id=&quot;semicolons&quot;&gt;Semicolons!!&lt;/h3&gt;

&lt;p&gt;Almost every Bricklayer command (line of code) should end with a semicolon.  There are some exceptions, but we will not consider those at this time. A semicolon tells the computer that the current command (or line of code) is done.&lt;/p&gt;

&lt;h3 id=&quot;adding-function-calls&quot;&gt;Adding function calls&lt;/h3&gt;

&lt;p&gt;Following is the artifact that we will create with our Bricklayer program.  It is annotated to show the command needed for each of the blue, yellow, and green blocks.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-app/bricklayer-app05.jpg&quot; alt=&quot;Level 3 Artifact&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;In general the command&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put2D (a,b) COLOR (x,z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;places a brick of color COLOR and size a x b at location (x,z).  So the commands&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put2D (5,2) BLUE (0,0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;places a 5x2 blue block at location (0,0).&lt;/p&gt;

&lt;p&gt;Our complete program is shown below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-app/bricklayer-app06.png&quot; alt=&quot;Bricklayer Program 01&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;running-your-bricklayer-lite-program&quot;&gt;Running your Bricklayer-Lite program&lt;/h3&gt;

&lt;p&gt;At this point we are ready to run (execute) our program. First let’s save it.  Now click the &lt;em&gt;Run&lt;/em&gt; button at the bottom of the Bricklayer window.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-app/bricklayer-app07.png&quot; alt=&quot;Bricklayer Run Button&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;If your program has no errors and you have LDD (LEGO Digital Designer) installed properly, your artifact will open in LDD. Below is a screenshot from LDD (after some work to center and resize the artifact).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-app/bricklayer-app08.png&quot; alt=&quot;LDD screenshot&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;errorsthey-are-unavoidable&quot;&gt;Errors—they are unavoidable!&lt;/h3&gt;

&lt;p&gt;Suppose that the following was the program I ran.  Challenge for you—can you find the error in it?&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-app/bricklayer-app09.png&quot; alt=&quot;Bricklayer program with error&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;After running this version of the program, LDD did not open.  Uh oh. Now my Bricklayer program has a ominous-looking green arrowhead surrounded by red at line 10.  This tells me my program has an error on or near line 10.  To learn more, I look at the console pane at the bottom of the window.  It tells me there is an “Error: unclosed string”.  If you look carefully at line 10, you’ll see that I did not close the quotes around the word “demo”.  This is my problem.  Sometimes identifying the error is not so clear; Bricklayer’s console provides more information for us.  See the image below for the sequence of steps I could have gone through to identify my error.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-app/bricklayer-app10.jpg&quot; alt=&quot;Bricklayer Console Error Message&quot; /&gt;
    
&lt;/figure&gt;</content><author><name>Betty Love</name></author><category term="featured" /><summary type="html">Topics on this page</summary></entry><entry><title type="html">Getting Started with Bricklayer Level 4</title><link href="http://localhost:4000/getting-started-with-level4/" rel="alternate" type="text/html" title="Getting Started with Bricklayer Level 4" /><published>2019-02-21T00:00:00-06:00</published><updated>2019-02-21T00:00:00-06:00</updated><id>http://localhost:4000/getting-started-with-level4</id><content type="html" xml:base="http://localhost:4000/getting-started-with-level4/">&lt;h4 class=&quot;no_toc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#coordinates-in-3d-space&quot; id=&quot;markdown-toc-coordinates-in-3d-space&quot;&gt;Coordinates in 3D space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Level 4 in Bricklayer opens up the world of 3D artifacts!  To create and run a Level_4 program, you must use the Bricklayer app (not Bricklayer-Lite).  For an introduction to programming in the Bricklayer app, check out &lt;a href=&quot;/getting-started-with-bricklayer&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;coordinates-in-3d-space&quot;&gt;Coordinates in 3D space&lt;/h3&gt;

&lt;p&gt;Let’s start with a review of 2D coordinates in Bricklayer.  When programming in 2D, artifacts are placed in the x-z plane.  The point (x,z) is x units in the horizontal direction from 0 and z units in the vertical direction from 0.  Consider the figure below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/level4-01.jpg&quot; alt=&quot;Horizontal and vertical coordinates&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;As we move to 3D, we (visually) lay the x-z plane flat, so the above artifact would be viewed as follows.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/level4-02.jpg&quot; alt=&quot;x-z plane laid flat&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;We think of x as the &lt;em&gt;width&lt;/em&gt; of the artifact and z as the &lt;em&gt;depth&lt;/em&gt;.  The third dimension, which we’ll label as &lt;em&gt;y&lt;/em&gt;, is the height.  In the artifact above, the height is one.  Below is the same artifact with second layer the same size as the first added.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/level4-03.jpg&quot; alt=&quot;3D artifact&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The code to create this artifact is shown below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/level4-04.png&quot; alt=&quot;Code for 3D artifact&quot; /&gt;
    
&lt;/figure&gt;</content><author><name>Betty Love</name></author><category term="level4," /><category term="3D" /><summary type="html">Topics on this page</summary></entry><entry><title type="html">Getting Started with Bricklayer-Lite</title><link href="http://localhost:4000/getting-started-with-bricklayer-lite-level-1/" rel="alternate" type="text/html" title="Getting Started with Bricklayer-Lite" /><published>2019-01-26T00:00:00-06:00</published><updated>2019-01-26T00:00:00-06:00</updated><id>http://localhost:4000/getting-started-with-bricklayer-lite-level-1</id><content type="html" xml:base="http://localhost:4000/getting-started-with-bricklayer-lite-level-1/">&lt;h4 class=&quot;no_toc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-started-with-bricklayer-lite-level_1-programming&quot; id=&quot;markdown-toc-getting-started-with-bricklayer-lite-level_1-programming&quot;&gt;Getting Started with Bricklayer-Lite Level_1 programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#three-elements-of-every-bricklayer-and-bricklayer-lite-program&quot; id=&quot;markdown-toc-three-elements-of-every-bricklayer-and-bricklayer-lite-program&quot;&gt;Three elements of every Bricklayer and Bricklayer-Lite Program&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#semicolons&quot; id=&quot;markdown-toc-semicolons&quot;&gt;Semicolons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#adding-put2d-function-calls&quot; id=&quot;markdown-toc-adding-put2d-function-calls&quot;&gt;Adding put2D function calls&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#running-your-bricklayer-lite-program&quot; id=&quot;markdown-toc-running-your-bricklayer-lite-program&quot;&gt;Running your Bricklayer-Lite program&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bricklayer-code-generation&quot; id=&quot;markdown-toc-bricklayer-code-generation&quot;&gt;Bricklayer code generation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#output-format&quot; id=&quot;markdown-toc-output-format&quot;&gt;Output format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#if-you-forget&quot; id=&quot;markdown-toc-if-you-forget&quot;&gt;If you forget…&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#more-information&quot; id=&quot;markdown-toc-more-information&quot;&gt;More information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bricklayer-Lite is a app available at &lt;a href=&quot;https://bricklayer.org&quot;&gt;bricklayer.org&lt;/a&gt;. Its purpose is to provide a gentle introduction to bricklayer programming. Programs are created by interactively selecting puzzle pieces that represent program elements and connecting them. This is all done in a browser window; hence no software download is required.  Only two-dimensional artifacts can be created with Bricklayer-Lite.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;getting-started-with-bricklayer-lite-level_1-programming&quot;&gt;Getting Started with Bricklayer-Lite Level_1 programming&lt;/h3&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://bricklayer.org&quot;&gt;bricklayer.org&lt;/a&gt; and choose Apps -&amp;gt; Bricklayer-Lite. Take a few minutes to familiarize yourself with the contents of this page.  When you’re ready to start creating your Level_1 program, click on “Level_1”.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite01.png&quot; alt=&quot;Starting Bricklayer-Lite Level_1&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;three-elements-of-every-bricklayer-and-bricklayer-lite-program&quot;&gt;Three elements of every Bricklayer and Bricklayer-Lite Program&lt;/h3&gt;

&lt;p&gt;Every Bricklayer and Bricklayer-Lite program contains the following three commands (lines of code / puzzle pieces)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;open&lt;/em&gt; statement - when you are getting started, the commands you use will be from Bricklayer Level_1; as you learn more, you’ll start using functions from higher levels.  Currently, there are five levels of Bricklayer functions.  To open Level_1 in Bricklayer-Lite, first click on &lt;em&gt;open level&lt;/em&gt;, then drag the &lt;em&gt;open Level_1&lt;/em&gt; puzzle piece into the white part of the window pane, as shown below.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite02.png&quot; alt=&quot;Bricklayer-Lite Level_1 open block&quot; /&gt;
    
&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;&lt;em&gt;build2D&lt;/em&gt; statement - this command tells Bricklayer the dimensions of the virtual space you want to work in.  It should be at least as large as the artifact you plan to build.  Click on &lt;em&gt;build base plate&lt;/em&gt; and then click on and drag the &lt;em&gt;build2D&lt;/em&gt; puzzle piece into the area under the &lt;em&gt;open&lt;/em&gt; puzzle piece.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite03.png&quot; alt=&quot;Bricklayer-Lite Level_1 build2D block&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Either at the same time you drag the &lt;em&gt;build2D&lt;/em&gt; piece out or afterward, you want to connect it to the &lt;em&gt;open&lt;/em&gt; piece as shown below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite05.png&quot; alt=&quot;Connect build piece to open piece&quot; /&gt;
    
&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;&lt;em&gt;show2D&lt;/em&gt; statement - the third command that is in every Bricklayer-Lite program is the &lt;em&gt;show2D&lt;/em&gt; command.  It is also the last command/statement. In Bricklayer-Lite click on and drag the &lt;em&gt;show2D&lt;/em&gt; puzzle piece out, but don’t hook it up yet.  We’ll do that when we’re done with the rest of the program.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite04.png&quot; alt=&quot;Bricklayer-Lite Level_1 show2D block&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The &lt;em&gt;“thing”&lt;/em&gt; part of the show2D command is a way for you to name the artifact that you’re creating. You can replace &lt;em&gt;thing&lt;/em&gt; with any sequence of characters that you choose (or you can just leave it alone).  Note that you must keep the quotes around this sequence of characters. The name you choose has no effect on how the program runs or the artifact that it generates.&lt;/p&gt;

&lt;h3 id=&quot;semicolons&quot;&gt;Semicolons&lt;/h3&gt;

&lt;p&gt;Almost every Bricklayer command (line of code) should end with a semicolon.  There are some exceptions, but we will not consider those at this time. A semicolon tells the computer that the current command (or line of code) is done. In Bricklayer-Lite we must drag the semicolon puzzle piece from the &lt;em&gt;symbols&lt;/em&gt; section and connect one to the end of each command.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite06.png&quot; alt=&quot;Bricklayer-Lite Semicolon&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;After adding a semicolon to the end of each puzzle piece, your program should look like the following.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite07.png&quot; alt=&quot;Bricklayer-Lite 3-line program&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Selecting the semicolon puzzle piece for each statement can become tedious quickly.  It’s possible to &lt;em&gt;duplicate&lt;/em&gt; any puzzle piece by right-clicking on that piece and choosing &lt;em&gt;Duplicate&lt;/em&gt;. If you have a mouse with two buttons, then right-clicking just means to click on the right button.  If you are using a Mac, then to right click on something you do a &lt;em&gt;Control-click&lt;/em&gt;, which means you hold down the &lt;em&gt;Control&lt;/em&gt; button and click. If you need more help on how to right-click on your machine, try google.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite08.png&quot; alt=&quot;Bricklayer-Lite duplicate block&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;adding-put2d-function-calls&quot;&gt;Adding put2D function calls&lt;/h3&gt;

&lt;p&gt;Now we are ready to actually build our artifact.  In Level_1, the bricks available to us are as follows.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sizes: 1×1, 1×2, 2×1, 2×2, 2×3, 3×2, 2×4, 4×2&lt;/li&gt;
  &lt;li&gt;Colors: BLUE, GRAY, BLACK, GREEN, RED, WHITE, YELLOW, EMPTY&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The official documentation on Bricklayer Level_1 can be found at &lt;a href=&quot;https://bricklayer.org&quot;&gt;bricklayer.org&lt;/a&gt; by choosing &lt;em&gt;Apps -&amp;gt; Bricklayer -&amp;gt; Level 1 - Document&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For each size/color combination (how many of these are there?) a corresponding puzzle piece is available in the &lt;em&gt;function calls&lt;/em&gt; section of the Bricklayer-Lite window.  The following image shows all the options for red bricks.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite09.png&quot; alt=&quot;Bricklayer-Lite Level 1 red bricks&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;To put a 2x2 red brick at (0,0), drag the 2x2 red brick puzzle piece in to the pane with the other puzzle pieces.  Add a semicolon to it and connect the pieces as shown below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite10.png&quot; alt=&quot;Bricklayer-Lite program&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;running-your-bricklayer-lite-program&quot;&gt;Running your Bricklayer-Lite program&lt;/h3&gt;

&lt;p&gt;At this point you are ready to run (execute) your program. So far you’ve just been building your program and the computer has not tried to execute any of the commands.  Now that we have a complete program, we need to tell the computer we’re ready to run it.  To do this, click the &lt;em&gt;Run&lt;/em&gt; button at the top of the white pane.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite11.png&quot; alt=&quot;Run a Bricklayer-Lite program&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;If your program has no errors, output will appear in another pane on the same page. After running our sample program, I see the following.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite12.png&quot; alt=&quot;Output from running sample Bricklayer-Lite program&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;This output is correct since we placed a 2x2 red brick at (0,0).  Since we set our &lt;em&gt;build2D&lt;/em&gt; space to (2,2), our 2x2 red brick takes up the entire space.  Let’s make our build space larger to get better perspective. The size area in the &lt;em&gt;build2D&lt;/em&gt; puzzle piece is a dropdown menu. Click on it and choose (4,4) as shown below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite13.png&quot; alt=&quot;Change build space size&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Now click on &lt;em&gt;Run&lt;/em&gt; again.  The output should be as follows.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite14.png&quot; alt=&quot;Output from running sample Bricklayer-Lite program&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;bricklayer-code-generation&quot;&gt;Bricklayer code generation&lt;/h3&gt;

&lt;p&gt;One final note.  A little later on, you will graduate to writing Bricklayer programs in the Bricklayer app (an app you must download and install on your computer).  In it you type your commands as opposed to dragging and connecting puzzle pieces.  To help you get started understanding how your Bricklayer-Lite program corresponds to a Bricklayer program, when you run a Bricklayer-Lite program, the corresponding Bricklayer program is generated in the pane at the bottom of the Bricklayer-Lite page.  For our example, the Bricklayer program is as follows.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open Level_1;

build2D (4,4);

put2D_2x2_RED(0,0);

show2D &quot;thing&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;output-format&quot;&gt;Output format&lt;/h3&gt;

&lt;p&gt;One option in Bricklayer-Lite is the output format. The default is set to &lt;em&gt;PLAIN&lt;/em&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite17.png&quot; alt=&quot;Bricklayer-Lite plain output format&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The other option is &lt;em&gt;LEGO&lt;/em&gt; which can be selected from the drop-down menu.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite18.png&quot; alt=&quot;Bricklayer-Lite LEGO output format&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;When we run our program with &lt;em&gt;LEGO&lt;/em&gt; output format selected, we get the following.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite19.png&quot; alt=&quot;Bricklayer-Lite example with LEGO output&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;if-you-forget&quot;&gt;If you forget…&lt;/h3&gt;

&lt;p&gt;If you forget how to write a Bricklayer-Lite program, a quick way to refresh your memory is to look at an example. You can get to a Level_1 example quickly by clicking on &lt;em&gt;here&lt;/em&gt; in the sentence at the top of the Bricklayer-Lite page.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite15.png&quot; alt=&quot;Bricklayer-Lite examples&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Now click on &lt;em&gt;Flag of Denmark&lt;/em&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/bricklayer-lite/bricklayer-lite16.png&quot; alt=&quot;Flag of Denmark example&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;This will open up a Bricklayer-Lite program that generates the flag of Denmark.&lt;/p&gt;

&lt;h3 id=&quot;more-information&quot;&gt;More information&lt;/h3&gt;

&lt;p&gt;For more information on Bricklayer Level_1 see &lt;a href=&quot;/intro-to-level1-functions&quot;&gt;this post&lt;/a&gt;.  For more informaiton on both Bricklayer Level_1 and and programming in Bricklayer-Lite, see &lt;a href=&quot;https://bricklayer.org/level-1/&quot;&gt;https://bricklayer.org/level-1/&lt;/a&gt;.&lt;/p&gt;</content><author><name>Betty Love</name></author><category term="featured" /><summary type="html">Topics on this page</summary></entry><entry><title type="html">Overwriting–placing blocks on top of blocks (Vitruvia Concept 7)</title><link href="http://localhost:4000/overwriting-blocks/" rel="alternate" type="text/html" title="Overwriting--placing blocks on top of blocks (Vitruvia Concept 7)" /><published>2019-01-17T00:00:00-06:00</published><updated>2019-01-17T00:00:00-06:00</updated><id>http://localhost:4000/overwriting-blocks</id><content type="html" xml:base="http://localhost:4000/overwriting-blocks/">&lt;p&gt;Thus far our placement of blocks has been analogous to placing physical LEGO blocks on a baseplate. With Vitruvia Concept 7, we diverge from that a bit.  Consider the following bricklayer commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put2D_2x2_RED(0,0)
put2D_1x1_BLUE(0,0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we were building with physical LEGO, then these commands would generate a 2x2 red block with a 1x1 blue block on top of it, as in the following image.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept7-01.png&quot; alt=&quot;blue on top of red blocks&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Since we’re building with virtual LEGO, when one brick is placed in the same position as another brick, the latter one &lt;em&gt;overwrites&lt;/em&gt; the first. In this case the commands produced the following artifact.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept7-02.png&quot; alt=&quot;blue overwrites red block&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The Bricklayer rule is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For a given location, the brick placed there last is the one that is visible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This feature can frequently be used to our advantage.  Suppose I want to create the following artifact.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept7-03.png&quot; alt=&quot;red and black blocks&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Without using Bricklayer’s &lt;em&gt;overwriting&lt;/em&gt; feature, we would need at least seven &lt;em&gt;put&lt;/em&gt; commands.  One possibility is the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put2D_2x1_RED(0,0)
put2D_2x1_RED(2,0)
put2D_1x2_RED(3,1)
put2D_2x1_RED(2,3)
put2D_2x1_RED(0,3)
put2D_1x2_RED(0,1)
put2D_2x2_BLACK(1,1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With overwriting, the same thing can be accomplished much more easily, as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put2D_4x2_RED(0,0)
put2D_4x2_RED(0,2)
put2D_2x2_BLACK(1,1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Clearly the latter way is more clear, easier, and less likely to have errors (as in wrong coordinates).&lt;/p&gt;</content><author><name>Betty Love</name></author><category term="featured" /><summary type="html">Thus far our placement of blocks has been analogous to placing physical LEGO blocks on a baseplate. With Vitruvia Concept 7, we diverge from that a bit. Consider the following bricklayer commands:</summary></entry><entry><title type="html">Bricklayer Level 1 functions (Vitruvia Concept 5)</title><link href="http://localhost:4000/intro-to-level1-functions/" rel="alternate" type="text/html" title="Bricklayer Level 1 functions (Vitruvia Concept 5)" /><published>2019-01-14T00:00:00-06:00</published><updated>2019-01-14T00:00:00-06:00</updated><id>http://localhost:4000/intro-to-level1-functions</id><content type="html" xml:base="http://localhost:4000/intro-to-level1-functions/">&lt;!-- #### Topics on this page
{:.no_toc}
* TOC
{:toc} --&gt;

&lt;p&gt;&lt;a href=&quot;/placing-multiple-bricks&quot;&gt;My post about Vitruvia Concept 4&lt;/a&gt; discussed how to place the following sequence of bricks.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Put a 1x1 GREEN brick at location (4,3).&lt;/li&gt;
  &lt;li&gt;Put a 2x1 BLUE brick at location (1,0).&lt;/li&gt;
  &lt;li&gt;Put a 4x2 YELLOW brick at location (0,3).&lt;/li&gt;
  &lt;li&gt;Put a 1x2 RED brick at location (3,1).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this post, we’ll consider how to distill these commands to their essentials and have our first look at functions in bricklayer.&lt;/p&gt;

&lt;p&gt;What if I rewrote the four statements like the following.  Do you still understand what they say?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Put 1x1 GREEN brick at location (4,3).&lt;/li&gt;
  &lt;li&gt;Put 2x1 BLUE brick at location (1,0).&lt;/li&gt;
  &lt;li&gt;Put 4x2 YELLOW brick at location (0,3).&lt;/li&gt;
  &lt;li&gt;Put 1x2 RED brick at location (3,1).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How about now?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Put 1x1 GREEN  at location (4,3).&lt;/li&gt;
  &lt;li&gt;Put 2x1 BLUE  at location (1,0).&lt;/li&gt;
  &lt;li&gt;Put 4x2 YELLOW  at location (0,3).&lt;/li&gt;
  &lt;li&gt;Put 1x2 RED  at location (3,1).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And now?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Put 1x1 GREEN  at  (4,3).&lt;/li&gt;
  &lt;li&gt;Put 2x1 BLUE  at  (1,0).&lt;/li&gt;
  &lt;li&gt;Put 4x2 YELLOW  at  (0,3).&lt;/li&gt;
  &lt;li&gt;Put 1x2 RED  at  (3,1).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Put 1x1 GREEN  (4,3).&lt;/li&gt;
  &lt;li&gt;Put 2x1 BLUE  (1,0).&lt;/li&gt;
  &lt;li&gt;Put 4x2 YELLOW  (0,3).&lt;/li&gt;
  &lt;li&gt;Put 1x2 RED (3,1).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once more!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;put2D_1x1_GREEN(4,3)&lt;/li&gt;
  &lt;li&gt;put2D_2x1_BLUE(1,0)&lt;/li&gt;
  &lt;li&gt;put2D_4x2_YELLOW(0,3)&lt;/li&gt;
  &lt;li&gt;put2D_1x2_RED(3,1)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ok, the “2D” piece looks a little out of place, but otherwise, can you see the transformation? If so, congratulations!  You’re reading and comprehending bricklayer code!&lt;/p&gt;

&lt;p&gt;Bricklayer code can place bricks in a two-dimensional (2D) grid like we’ve been working on in the Vitruvia exercises, but it can also place bricks in a three-dimensional space (typically what one has in mind when building with LEGO).  Dr. Winter reserved the word “put” for programming 3D objects and uses “put2D” to specify two-dimensional objects.&lt;/p&gt;

&lt;p&gt;To review, the general form of the Bricklayer command to place a brick having a given &lt;em&gt;size&lt;/em&gt; and &lt;em&gt;color&lt;/em&gt; at a specific &lt;em&gt;location&lt;/em&gt; is the following.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/put2D.png&quot; alt=&quot;Level 1 put2D function&quot; /&gt;
    
&lt;/figure&gt;</content><author><name>Betty Love</name></author><category term="featured" /><summary type="html"></summary></entry><entry><title type="html">Counting items in a list</title><link href="http://localhost:4000/counting-list-items/" rel="alternate" type="text/html" title="Counting items in a list" /><published>2019-01-13T00:00:00-06:00</published><updated>2019-01-13T00:00:00-06:00</updated><id>http://localhost:4000/counting-list-items</id><content type="html" xml:base="http://localhost:4000/counting-list-items/">&lt;!-- #### Topics on this page
{:.no_toc}
* TOC
{:toc} --&gt;

&lt;p&gt;We all know how to count, right?  Seems obvious.  Sometimes, however, it’s not so obvious. Suppose there are 20 people in our class and each is assigned a number between 1 and 20.  I then say I want people with numbers 5 through 12 to stand up.  How many people will stand up?&lt;/p&gt;

&lt;p&gt;Many people automatically subtract 5 from 12 and say 7.  But is this correct?  (Probably not or I wouldn’t be going on about this!) The best way to figure this out is to actually count the people with numbers 5 through 12, or equivalently, to count the numbers 5 through 12.  See the figure below for this.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/counting/counting-list01.png&quot; alt=&quot;Counting elements of a list&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;As you see, there are &lt;em&gt;8&lt;/em&gt; people with number between 5 and 12.  So one more than the 7 that many people assumed at first.  This is a very common error!&lt;/p&gt;

&lt;p&gt;Let’s try another one. Take a look at the figure below. I have blue blocks in positions3 through 15.  How many blue blocks are there?&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/counting/blue-blocks.png&quot; alt=&quot;Counting blue blocks&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Again, your first try might be to subtract 3 from 15 and say 12.  But maybe you’re thinking that that strategy didn’t work well in our first example.  So maybe we should count.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/counting/blue-blocks02-600.png&quot; alt=&quot;Counting blue blocks again&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;So we get 13 instead of 12.  Hmm…I’m starting to see a pattern here.  If we just subtract the smaller number from the larger, we’re one off every time.  Actually we’re one short.  So maybe we should still do the subtraction, but then add one.  If we took this approach,  we would count the people with numbers 5 through 12 as follows:&lt;/p&gt;

&lt;p&gt;12 - 5 + 1 = 8&lt;/p&gt;

&lt;p&gt;And we’d count the blue blocks like this:&lt;/p&gt;

&lt;p&gt;15 - 3 + 1 = 13&lt;/p&gt;

&lt;p&gt;So if we wanted to come up with a formula for counting the number of items in a list between a starting point (I’ll call &lt;em&gt;start&lt;/em&gt;) and a stopping point (I’ll call &lt;em&gt;stop&lt;/em&gt;), it would be the following:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;stop - start + 1&lt;/em&gt;&lt;/p&gt;</content><author><name>Betty Love</name></author><category term="featured" /><category term="counting" /><summary type="html"></summary></entry><entry><title type="html">Placing multiple blocks (Vitruvia Concept 4)</title><link href="http://localhost:4000/placing-multiple-bricks/" rel="alternate" type="text/html" title="Placing multiple blocks (Vitruvia Concept 4)" /><published>2019-01-13T00:00:00-06:00</published><updated>2019-01-13T00:00:00-06:00</updated><id>http://localhost:4000/placing-multiple-bricks</id><content type="html" xml:base="http://localhost:4000/placing-multiple-bricks/">&lt;!-- #### Topics on this page
{:.no_toc}
* TOC
{:toc} --&gt;

&lt;p&gt;In Vitruvia Concept 4, you are asked to place a sequence of bricks in various locations.  For example, consider these instructions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Put a 1x1 GREEN brick at location (4,3).&lt;/li&gt;
  &lt;li&gt;Put a 2x1 BLUE brick at location (1,0).&lt;/li&gt;
  &lt;li&gt;Put a 4x2 YELLOW brick at location (0,3).&lt;/li&gt;
  &lt;li&gt;Put a 1x2 RED brick at (3,1).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For each of these brick placements, you follow the same squence of steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Click on the color you want.&lt;/li&gt;
  &lt;li&gt;Click on the location given (&lt;em&gt;over&lt;/em&gt; and &lt;em&gt;up&lt;/em&gt;).&lt;/li&gt;
  &lt;li&gt;Click on other cells to create the right-sized brick, remembering that the block you place in step 2 is the lower left corner of the whole brick.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s go through the sequence.&lt;/p&gt;

&lt;h4 id=&quot;put-a-1x1-green-brick-at-location-43&quot;&gt;Put a 1x1 GREEN brick at location (4,3).&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Click on GREEN.&lt;/li&gt;
  &lt;li&gt;Click on (4,3) — (over 4 and up 3)&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept4-01.png&quot; alt=&quot;Vitruvia Concept 4-01&quot; /&gt;
    
&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;Since we’re only placing a 1x1 brick, we’re done with this one.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;put-a-2x1-blue-brick-at-location-10&quot;&gt;Put a 2x1 BLUE brick at location (1,0).&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Click on BLUE.&lt;/li&gt;
  &lt;li&gt;Click on (1,0)&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept4-02.png&quot; alt=&quot;Vitruvia Concept 4-02&quot; /&gt;
    
&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;We need to place a 2x1 brick, so we have more work to do.  First, let’s remember what a 2x1 brick looks like.  Remember  (&lt;em&gt;over&lt;/em&gt; and &lt;em&gt;up&lt;/em&gt;), so 2 &lt;em&gt;over/wide&lt;/em&gt; and 1 &lt;em&gt;up/tall&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept4-03.jpg&quot; alt=&quot;Vitruvia Concept 4-03&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;So we click in cell (2,0) to create the 2x1 blue brick with lower left corner at (1,0).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept4-04.png&quot; alt=&quot;Vitruvia Concept 4-04&quot; /&gt;
    
&lt;/figure&gt;

&lt;h4 id=&quot;put-a-4x2-yellow-brick-at-location-03&quot;&gt;Put a 4x2 YELLOW brick at location (0,3).&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Click on YELLOW.&lt;/li&gt;
  &lt;li&gt;Click on (0,3).&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept4-05.png&quot; alt=&quot;Vitruvia Concept 4-05&quot; /&gt;
    
&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;This time we’re placing a 4x2 brick, so we have more to do. A 4x2 brick is 4 &lt;em&gt;wide&lt;/em&gt; and 2 &lt;em&gt;tall&lt;/em&gt;, so we click on cells (1,3), (2,3), (3,3), (0,4), (1,4), (2,4), and (3,4) to create the 4x2 brick.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept4-06.png&quot; alt=&quot;Vitruvia Concept 4-06&quot; /&gt;
    
&lt;/figure&gt;

&lt;h4 id=&quot;put-a-1x2-red-brick-at-31&quot;&gt;Put a 1x2 RED brick at (3,1).&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Click on RED.&lt;/li&gt;
  &lt;li&gt;Click on (3,1).&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept4-07.png&quot; alt=&quot;Vitruvia Concept 4-07&quot; /&gt;
    
&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;This time we’re placing a 1x2 brick which is 1 &lt;em&gt;wide&lt;/em&gt; and 2 &lt;em&gt;tall&lt;/em&gt;, so we click on cell (3,2) to create the 1x2 brick.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept4-08.png&quot; alt=&quot;Vitruvia Concept 4-08&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Thinking ahead….what happens if we place a brick in a position that is already covered by another brick???&lt;/p&gt;</content><author><name>Betty Love</name></author><category term="featured" /><summary type="html"></summary></entry><entry><title type="html">Placing blocks that are bigger than 1x1 (Vitruvia Concept 3)</title><link href="http://localhost:4000/placing-bigger-blocks/" rel="alternate" type="text/html" title="Placing blocks that are bigger than 1x1 (Vitruvia Concept 3)" /><published>2019-01-11T00:00:00-06:00</published><updated>2019-01-11T00:00:00-06:00</updated><id>http://localhost:4000/placing-bigger-blocks</id><content type="html" xml:base="http://localhost:4000/placing-bigger-blocks/">&lt;!-- #### Topics on this page
{:.no_toc}
* TOC
{:toc} --&gt;

&lt;p&gt;In Vitruvia Concept 1, you are asked to place 1x1 bricks at various locations.  When you get to Concept 3, however, things may seem a little confusing since you are asked to place larger bricks.  For example, Concept 3 Exercise 7 is as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Put a 4x2 YELLOW brick at location (0,3).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Location (0,3) is just one cell, right?  Just one position in the grid.  So how does one put a 4x2 brick there? The answer is that the location given is where the &lt;em&gt;bottom left corner&lt;/em&gt; of the brick goes. This is the way Dr. Winter designed and implemented bricklayer.&lt;/p&gt;

&lt;p&gt;So…to put a 4x2 YELLOW brick at location (0,3), we must first find location (0,3). Remember &lt;em&gt;over and up&lt;/em&gt; or Dr. Winter’s &lt;em&gt;run before you jump&lt;/em&gt; to locate (0,3).&lt;/p&gt;

&lt;p&gt;Actually, we should first click on YELLOW so that when we find location (0,3), we can click on it and put a YELLOW block there.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept3-01.jpg&quot; alt=&quot;Vitruvia Concept 3 Exercise 7&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Now we need to figure out what a 4x2 brick looks like.  Basically the question is: is it 4 wide and 2 tall or 4 tall and 2 wide???  The answer is that it follows the same convention as the grid coordinates.  The first number is how far &lt;em&gt;over&lt;/em&gt; (&lt;em&gt;wide&lt;/em&gt;) and the second is how far &lt;em&gt;up&lt;/em&gt; (&lt;em&gt;tall&lt;/em&gt;) as shown in the following figure.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept3-02.jpg&quot; alt=&quot;4x2 vs 2x4 brick&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;We go back to our Vitruvia grid and click in positions (1,3), (2,3), (3,3), (4,3), (0,4), (1,4), (2,4), (3,4) to complete the 4x2 brick at location (0,3).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/concept3-03.png&quot; alt=&quot;Vitruvia Concept 3 Exercise 7 solution&quot; /&gt;
    
&lt;/figure&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;another-example&quot;&gt;Another example&lt;/h3&gt;

&lt;p&gt;Suppose we are asked to place a 2x3 RED block at (1,0).  Following are the steps to go through to accomplish this.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click on the RED brick to select RED as the color.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/select-red.png&quot; alt=&quot;Vitruvia select red as color&quot; /&gt;
    
&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;Click on location (1,0).  Recall that this will be the &lt;em&gt;lower left corner of the brick we’re placing&lt;/em&gt;. Also remember &lt;em&gt;over and up&lt;/em&gt;, so go over 1 and up 0 to get to location (1,0).&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/whereis1-0.jpg&quot; alt=&quot;Where is (1,0)&quot; /&gt;
    
&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
  &lt;li&gt;We are to place a 2x3 block.  Again remembering &lt;em&gt;over and up&lt;/em&gt;, this block will be 2 &lt;em&gt;over&lt;/em&gt; (&lt;em&gt;wide&lt;/em&gt;) and 3 &lt;em&gt;up&lt;/em&gt; (&lt;em&gt;tall&lt;/em&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/2-3or3-2.jpg&quot; alt=&quot;2x3 or 3x2&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Using the brick we’ve already placed in location (1,0) as the lower left corner, we click on cells (2,0), (1,1), (2,1), (1,2), and (2,2) to complete the 2x3 red brick.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/2x3red-at1-0.png&quot; alt=&quot;2x3 red at (1,0)&quot; /&gt;
    
&lt;/figure&gt;</content><author><name>Betty Love</name></author><category term="featured" /><summary type="html"></summary></entry><entry><title type="html">How to take a Vitruvia test</title><link href="http://localhost:4000/vitruvia-tests/" rel="alternate" type="text/html" title="How to take a Vitruvia test" /><published>2019-01-09T00:00:00-06:00</published><updated>2019-01-09T00:00:00-06:00</updated><id>http://localhost:4000/vitruvia-tests</id><content type="html" xml:base="http://localhost:4000/vitruvia-tests/">&lt;ol&gt;
  &lt;li&gt;From &lt;a href=&quot;https://bricklayer.org&quot;&gt;https://bricklayer.org&lt;/a&gt; select Apps -&amp;gt; Vitruvia -&amp;gt; Tests&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/vitruvia-test01.png&quot; alt=&quot;Starting Vitruvia tests from bricklayer.org menu&quot; /&gt;
    
&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Select the concept(s) you want to be tested on.  Note that you can select any number of concepts. For the first assignment, you should just choose Concept 1.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Select the number of questions you want the test to contain. In the image below, I have chosen 10.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/vitruvia-test01.png&quot; alt=&quot;Setting up Vitruvia test concepts and number of questions&quot; /&gt;
    
&lt;/figure&gt;

&lt;ol start=&quot;4&quot;&gt;
  &lt;li&gt;
    &lt;p&gt;Answer the questions, clicking “Check” after each answer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are doing a test for an Assignment, take a screenshot of the test summary so that you can submit it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/vitruvia/vitruvia-test03.png&quot; alt=&quot;Screenshot of Vitruvia test results&quot; /&gt;
    
&lt;/figure&gt;</content><author><name>Betty Love</name></author><category term="featured" /><summary type="html">From https://bricklayer.org select Apps -&amp;gt; Vitruvia -&amp;gt; Tests</summary></entry></feed>