<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-03-29T15:50:21-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">MATH 1120</title><subtitle>A guide for students.</subtitle><author><name>Betty Love</name><email>blove@unomaha.edu</email></author><entry><title type="html">Getting Started with Variables</title><link href="http://localhost:4000/intro-to-variables/" rel="alternate" type="text/html" title="Getting Started with Variables" /><published>2020-03-29T00:00:00-05:00</published><updated>2020-03-29T00:00:00-05:00</updated><id>http://localhost:4000/intro-to-variables</id><content type="html" xml:base="http://localhost:4000/intro-to-variables/">&lt;h4 class=&quot;no_toc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-the-same-figure-with-different-sets-of-colors&quot; id=&quot;markdown-toc-creating-the-same-figure-with-different-sets-of-colors&quot;&gt;Creating the same figure with different sets of colors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post we’ll explore how to use variables. Variables are handy when you’d like to use the same code, but with different values (numbers or colors).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;creating-the-same-figure-with-different-sets-of-colors&quot;&gt;Creating the same figure with different sets of colors&lt;/h3&gt;

&lt;p&gt;Suppose we want to create the following figure.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/val/love01.png&quot; alt=&quot;love-numbers&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The Level_3 code to create the figure at (0,0) is as follows.
&lt;a href=&quot; http://localhost:4000/assets/posts/val/love01.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(* Outline *)
put2D (17, 19)  RED    ( 0,  0);

(* Four panes background *)
put2D ( 7,  8)  WHITE  ( 1,  1);
put2D ( 7,  8)  WHITE  ( 9,  1);
put2D ( 7,  8)  WHITE  ( 1, 10);
put2D ( 7,  8)  WHITE  ( 9, 10);

(* L *)
put2D ( 5,  1)  BLACK  ( 2, 11);
put2D ( 1,  6)  BLACK  ( 2, 11);

(* O *)
put2D ( 3,  1)  BLACK  (11, 11);
put2D ( 3,  1)  BLACK  (11, 16);
put2D ( 1,  4)  BLACK  (10, 12);
put2D ( 1,  4)  BLACK  (14, 12);

(* V *)
put2D ( 1,  3)  BLACK  ( 2,  5);
put2D ( 1,  3)  BLACK  ( 3,  3);
put2D ( 1,  2)  BLACK  ( 4,  2);
put2D ( 1,  3)  BLACK  ( 5,  3);
put2D ( 1,  3)  BLACK  ( 6,  5);

(* E *)
put2D ( 5,  1)  BLACK  (10,  2);
put2D ( 5,  1)  BLACK  (10,  7);
put2D ( 3,  1)  BLACK  (10,  5);
put2D ( 1,  6)  BLACK  (10,  2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Suppose we’d like to create the same figure, but using different colors. For example, instead of red, white, and black, we want blue, green, and yellow.  One approach is to manually change every occurrence of RED to BLUE, every occurrence of WHITE to GREEN, and every occurrence of BLACK to YELLOW.  We could even be smart and use the Find/Replace option in the editor.  We’d have the following code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(* Outline *)
put2D (17, 19)  BLUE    ( 0,  0);

(* Four panes background *)
put2D ( 7,  8)  GREEN  ( 1,  1);
put2D ( 7,  8)  GREEN  ( 9,  1);
put2D ( 7,  8)  GREEN  ( 1, 10);
put2D ( 7,  8)  GREEN  ( 9, 10);

(* L *)
put2D ( 5,  1)  YELLOW  ( 2, 11);
put2D ( 1,  6)  YELLOW  ( 2, 11);

(* O *)
put2D ( 3,  1)  YELLOW  (11, 11);
put2D ( 3,  1)  YELLOW  (11, 16);
put2D ( 1,  4)  YELLOW  (10, 12);
put2D ( 1,  4)  YELLOW  (14, 12);

(* V *)
put2D ( 1,  3)  YELLOW  ( 2,  5);
put2D ( 1,  3)  YELLOW  ( 3,  3);
put2D ( 1,  2)  YELLOW  ( 4,  2);
put2D ( 1,  3)  YELLOW  ( 5,  3);
put2D ( 1,  3)  YELLOW  ( 6,  5);

(* E *)
put2D ( 5,  1)  YELLOW  (10,  2);
put2D ( 5,  1)  YELLOW  (10,  7);
put2D ( 3,  1)  YELLOW  (10,  5);
put2D ( 1,  6)  YELLOW  (10,  2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That code produces the following figure. 
&lt;a href=&quot; http://localhost:4000/assets/posts/val/love02.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/val/love02.png&quot; alt=&quot;love02&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;And if we wanted another set of colors, we could do all those changes again. But there’s another way.  And although it may not seem to be a big deal for this example, you’ll find out soon that it is a major time saver for future projects.&lt;/p&gt;

&lt;p&gt;The key is using variables.  A variable can take on different values. In our example, we need a color for the outer frame, another for the four panes, and another for the letters.  So let’s create three variables; we can name them whatever we’d like, but it’s best to give them descriptive names, like &lt;em&gt;frameColor&lt;/em&gt;, &lt;em&gt;paneColor&lt;/em&gt;, and &lt;em&gt;letterColor&lt;/em&gt;, rather than &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, and &lt;em&gt;c&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I’m going to rewrite the original code and everywhere I have RED, I’m going to put frameColor; everywhere I have WHITE, I’m going to put paneColor, and everywhere I have BLACK, I’m going to put letterColor.  Here’s what that looks like.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(* Outline *)
put2D (17, 19)  frameColor    ( 0,  0);

(* Four panes background *)
put2D ( 7,  8)  paneColor  ( 1,  1);
put2D ( 7,  8)  paneColor  ( 9,  1);
put2D ( 7,  8)  paneColor  ( 1, 10);
put2D ( 7,  8)  paneColor  ( 9, 10);

(* L *)
put2D ( 5,  1)  letterColor  ( 2, 11);
put2D ( 1,  6)  letterColor  ( 2, 11);

(* O *)
put2D ( 3,  1)  letterColor  (11, 11);
put2D ( 3,  1)  letterColor  (11, 16);
put2D ( 1,  4)  letterColor  (10, 12);
put2D ( 1,  4)  letterColor  (14, 12);

(* V *)
put2D ( 1,  3)  letterColor  ( 2,  5);
put2D ( 1,  3)  letterColor  ( 3,  3);
put2D ( 1,  2)  letterColor  ( 4,  2);
put2D ( 1,  3)  letterColor  ( 5,  3);
put2D ( 1,  3)  letterColor  ( 6,  5);

(* E *)
put2D ( 5,  1)  letterColor  (10,  2);
put2D ( 5,  1)  letterColor  (10,  7);
put2D ( 3,  1)  letterColor  (10,  5);
put2D ( 1,  6)  letterColor  (10,  2);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now this code won’t run because we haven’t defined what the values of our variables are.  To do that, we use and new kind of bricklayer statement: the &lt;em&gt;val&lt;/em&gt; statement. It’s pretty straightforward. We just set each of our variables equal to the value we want it to have.  In our example, the code looks like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val frameColor  = RED;
val paneColor   = WHITE;
val letterColor = BLACK;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Makes sense, right?  Ok, make sure that you put these three statements at the beginning of your code (after the build2D statement) since you have to define the values of the variables before the variables appear in the code.  Whole program: 
&lt;a href=&quot; http://localhost:4000/assets/posts/val/love03.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The output is the same as the original code:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/val/love03.png&quot; alt=&quot;love03&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;How do we change the colors?  Just change them in the &lt;em&gt;val&lt;/em&gt; statements.  If we want blue, green, and yellow, the &lt;em&gt;val&lt;/em&gt; statements would look like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val frameColor  = BLUE;
val paneColor   = GREEN;
val letterColor = YELLOW;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NONE OF THE OTHER CODE NEEDS TO CHANGE!!&lt;/p&gt;

&lt;p&gt;Try it out!  Put in your own combination of colors and see what happens!  Explore!!&lt;/p&gt;</content><author><name>Betty Love</name></author><category term="functions" /><summary type="html">Topics on this page</summary></entry><entry><title type="html">Creating an arbitrary element of a visual sequence</title><link href="http://localhost:4000/val-sequences01/" rel="alternate" type="text/html" title="Creating an arbitrary element of a visual sequence" /><published>2019-10-07T00:00:00-05:00</published><updated>2019-10-07T00:00:00-05:00</updated><id>http://localhost:4000/val-sequences01</id><content type="html" xml:base="http://localhost:4000/val-sequences01/">&lt;h4 class=&quot;notoc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#topics-on-this-page&quot; id=&quot;markdown-toc-topics-on-this-page&quot;&gt;Topics on this page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-1---code-to-create-one-artifact-at-00&quot; id=&quot;markdown-toc-step-1---code-to-create-one-artifact-at-00&quot;&gt;Step 1 - code to create one artifact at (0,0)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-2---code-to-create-one-artifact-at-an-arbitrary-location&quot; id=&quot;markdown-toc-step-2---code-to-create-one-artifact-at-an-arbitrary-location&quot;&gt;Step 2 - code to create one artifact at an arbitrary location&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-3---add-parameters-for-colors&quot; id=&quot;markdown-toc-step-3---add-parameters-for-colors&quot;&gt;Step 3 - add parameters for colors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-4---add-parameters-for-size&quot; id=&quot;markdown-toc-step-4---add-parameters-for-size&quot;&gt;Step 4 - add parameters for size&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;In this post we’ll write code to creating an arbitrary element of the visual sequence below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/val/sequence01.png&quot; alt=&quot;sequence01&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;First we need to understand the sequence in terms of size and location of key parts.  It is clear that there are two parts: the blue part and the red part. We’ll analyze each.  First, the blue block.  We’ll assume that the lower left corner of the element that we’re analyzing is (xLL,zLL) (for lower-left x coordinate and lower-left z coordinate).&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;  Element #  &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;  Width  &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;  Height  &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;  LL x &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;  LL z  &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;xLL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;zLL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;xLL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;zLL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;xLL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;zLL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;xLL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;zLL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;n&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;n&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;xLL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;zLL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So the code to create the blue block for element &lt;em&gt;n&lt;/em&gt; at &lt;em&gt;(xLL,zLL)&lt;/em&gt; will be&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put2D (2,n) BLUE (xLL,zLL);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now for the red block:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;  Element #  &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;  Width  &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;  Height  &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;  LL x &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;  LL z  &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;xLL+2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;zLL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;xLL+2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;zLL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;xLL+2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;zLL&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;xLL+2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;zLL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;n&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;xLL+2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;zLL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The code to create the red block for element &lt;em&gt;n&lt;/em&gt; at &lt;em&gt;(xLL,zLL)&lt;/em&gt; will be&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put2D (1,1) RED (xLL+2,zLL);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s write the code to create the figure above with elements 1 through 4.&lt;/p&gt;

&lt;p&gt;It will be based on parameters to define the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- location
- size 
- colors
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-1---code-to-create-one-artifact-at-00&quot;&gt;Step 1 - code to create one artifact at (0,0)&lt;/h3&gt;

&lt;p&gt;To make this step easier, let’s start with the prototype created in the bricklayer.org Grid app:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare02.png&quot; alt=&quot;Criss-cross square on grid&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The following code will create this artifact.
&lt;a href=&quot; http://localhost:4000/assets/posts/functions/crissCrossSquare01.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put2D (10,10) BLUE (0,0);
lineXZ (0,0) (9,9) YELLOW;
lineXZ (0,9) (9,0) YELLOW;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-2---code-to-create-one-artifact-at-an-arbitrary-location&quot;&gt;Step 2 - code to create one artifact at an arbitrary location&lt;/h3&gt;

&lt;p&gt;Let’s start by writing the code to create the artifact at (6,3).  The animation below illustrates how the coordinates of the artifact change as it moves from (0,0) to (6,3).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare04.gif&quot; alt=&quot;Criss-cross square animation&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Consider what is happening to the &lt;em&gt;x-coordinates&lt;/em&gt; of each of the blocks in the artifact as it is moved.  For example, the lower-left corner of the square starts at (0,0) and moves to the right until it gets to (6,0).  Along the way, it passed through (1,0), (2,0), (3,0), etc.  And what happens to the &lt;em&gt;z-coordinates&lt;/em&gt;?  They all stay the same until the artifact starts to move upward.  The lower-left corner goes from (6,0) to (6,1), (6,2), and then to (6,3).&lt;/p&gt;

&lt;p&gt;Let’s look at a different block, say, the upper right one that starts at (9,9). As the artifact moves the right, this block goes to (10,9), (11,9), (12,9), etc until it gets to (15,9).  Then it starts to move upward and goes to (15,10), (15,11), and finally (15,12).&lt;/p&gt;

&lt;p&gt;By moving the artifact from (0,0), to (6,3), we are &lt;em&gt;translating&lt;/em&gt; each block to the right by 6 and up by 3.  This means that if the coordinates of a block in the initial artifact were &lt;em&gt;(a,b)&lt;/em&gt;, in the new position, that block will be at &lt;em&gt;(a+6,b+3)&lt;/em&gt;.  Some examples:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (0,0) moved to (0+6,0+3) = (6,3)
- (9,9) moved to (9_6,9+3) = (15,12)
- (2,5) moved to (2+6,5+3) = (8,8)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I want to move the artifact to an arbitrary location, say, (xLoc,zLoc), I need to add &lt;em&gt;xLoc&lt;/em&gt; to the first coordinate of each block and &lt;em&gt;zLoc&lt;/em&gt; to the second coordinate of each block.  Examples:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (0,0) moves to (0+xLoc,0+zLoc)
- (9,9) moves to (9+xLoc,9+zLoc)
- (2,5) moves to (2+xLoc,5+zLoc)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Therefore my function to place a copy of the artifact at (xLoc,zLoc) would be as follows.
&lt;a href=&quot; http://localhost:4000/assets/posts/functions/crissCrossSquare02.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun crissCrossSquare (xLoc,zLoc) = 
(
    put2D (10,10) BLUE (0+xLoc,0+zLoc);
    lineXZ (0+xLoc,0+zLoc) (9+xLoc,9+zLoc) YELLOW;
    lineXZ (0+xLoc,9+zLoc) (9+xLoc,0+zLoc) YELLOW
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To place a copy at (6,3), use the function call:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crissCrossSquare (6,3);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output is as follows (red brick placed at (0,0) for reference)&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare07.png&quot; alt=&quot;Criss-cross square at (6,3)&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;step-3---add-parameters-for-colors&quot;&gt;Step 3 - add parameters for colors&lt;/h3&gt;

&lt;p&gt;Now suppose we’d like to create the criss-cross square artifact in different colors.  We need to specify a color for the square and a color for the lines.  Let’s call the color for the square &lt;em&gt;squareColor&lt;/em&gt; and the color for the lines &lt;em&gt;lineColor&lt;/em&gt;.  We’ll add these parameters to our function and substitute &lt;em&gt;squareColor&lt;/em&gt; for BLUE and &lt;em&gt;lineColor&lt;/em&gt; for YELLOW.  Now our function is as follows.
&lt;a href=&quot; http://localhost:4000/assets/posts/functions/crissCrossSquare03.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun crissCrossSquare (xLoc,zLoc,squareColor,lineColor) = 
(
    put2D (10,10) squareColor (0+xLoc,0+zLoc);
    lineXZ (0+xLoc,0+zLoc) (9+xLoc,9+zLoc) lineColor;
    lineXZ (0+xLoc,9+zLoc) (9+xLoc,0+zLoc) lineColor
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The following code places a blue and yellow copy at (0,0) and a pink and violet copy at (13,5)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crissCrossSquare (0,0,BLUE,YELLOW);
crissCrossSquare (13,5,PINK,VIOLET);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare09.png&quot; alt=&quot;Criss-cross squares&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;step-4---add-parameters-for-size&quot;&gt;Step 4 - add parameters for size&lt;/h3&gt;

&lt;p&gt;Now consider how we could modify our function so that we can create a copy of the artifact of an arbitrary size.  First let’s think about what that means.  Let’s go back to the initial code to create a criss-cross square at (0,0) and examine which parts of it relate to size. In the figure below, we see that clearly the size of the square depends on the size of the artifact.  Does anything else?&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare11.jpg&quot; alt=&quot;Criss-cross square code&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Yes!  The endpoints of the two lines are the corners of the square, so they will depend on the size of the square.
For a square of size 10 placed at (0,0), the endpoints of the two lines are:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - (0,0) and (9,9)
  - (0,9) and (9,0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How can we represent (9,9), (0,9) and (9,0) in terms of the size of the square (10 in this case)? How about the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - (0,0) and (10-1,10-1)
  - (0,10-1) and (10-1,0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So in general, for a square of size &lt;em&gt;squareSize&lt;/em&gt; placed at (0,0), the endpoints of the two lines would be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - (0,0)            and (squareSize-1,squareSize-1)
  - (0,squareSize-1) and (squareSize-1,0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we just need to &lt;em&gt;translate&lt;/em&gt; those coordinates to (&lt;em&gt;xLoc&lt;/em&gt;,&lt;em&gt;zLoc&lt;/em&gt;) as we did in Step 2 above.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - (  0         ,   0        ) moves to (     0       + xLoc,      0       + zLoc)
  - (squareSize-1,squareSize-1) moves to (squareSize-1 + xLoc, squareSize-1 + zLoc)
  - (  0         ,squareSize-1) moves to (     0       + xLoc, squareSize-1 + zLoc)
  - (squareSize-1,   0        ) moves to (squareSize-1 + xLoc,      0       + zLoc)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Incorporating this into our function with a new parameter &lt;em&gt;squareSize&lt;/em&gt; yields the following.
&lt;a href=&quot; http://localhost:4000/assets/posts/functions/crissCrossSquare03.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun crissCrossSquare (xLoc,zLoc,squareColor,lineColor,squareSize) = 
(
    put2D (squareSize,squareSize) squareColor (0+xLoc,0+zLoc);
    lineXZ ( 0 + xLoc,      0       + zLoc) (squareSize-1 + xLoc, squareSize-1 + zLoc) lineColor;
    lineXZ ( 0 + xLoc, squareSize-1 + zLoc) (squareSize-1 + xLoc,      0       + zLoc) lineColor
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following code places a blue and yellow copy of size 10 at (0,0), a pink and violet copy of size 15 at (13,5), and a red and white copy of size 7 at (2,12).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crissCrossSquare ( 0,  0, BLUE, YELLOW, 10);
crissCrossSquare (13,  5, PINK, VIOLET, 15);
crissCrossSquare ( 2, 12, RED , WHITE ,  7);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare13.png&quot; alt=&quot;Criss-cross squares&quot; /&gt;
    
&lt;/figure&gt;</content><author><name>Betty Love</name></author><category term="functions" /><summary type="html">Topics on this page Topics on this page</summary></entry><entry><title type="html">The traverseWithin function</title><link href="http://localhost:4000/getting-started-with-traverseWithin/" rel="alternate" type="text/html" title="The traverseWithin function" /><published>2019-04-15T00:00:00-05:00</published><updated>2019-04-15T00:00:00-05:00</updated><id>http://localhost:4000/getting-started-with-traverseWithin</id><content type="html" xml:base="http://localhost:4000/getting-started-with-traverseWithin/">&lt;h4 class=&quot;notoc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#topics-on-this-page&quot; id=&quot;markdown-toc-topics-on-this-page&quot;&gt;Topics on this page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-1&quot; id=&quot;markdown-toc-example-1&quot;&gt;Example 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#example-2&quot; id=&quot;markdown-toc-example-2&quot;&gt;Example 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#one-more-examplemake-our-own-circle-function&quot; id=&quot;markdown-toc-one-more-examplemake-our-own-circle-function&quot;&gt;One more example—make our own circle function!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;In this post we’ll investigate the &lt;em&gt;traverseWithin&lt;/em&gt; function from Level_5.&lt;/p&gt;

&lt;h3 id=&quot;example-1&quot;&gt;Example 1&lt;/h3&gt;

&lt;p&gt;Let’s start with a small example.  Consider the program below.
&lt;a href=&quot; http://localhost:4000/assets/posts/level5/traverseWithin01.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open Level_5;

fun xLessThan2 (x, y, z) =
    if x &amp;lt; 2 then GREEN else YELLOW;

build (5,1,5);

traverseWithin (0,0,0)  (4,0,4)  xLessThan2;

show &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output is as follows.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level5/traverseWithin01a.png&quot; alt=&quot;Artifact &quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;So…how does this work?&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;traverseWithin&lt;/em&gt; function is a very powerful function, unlike any we’ve seen before.  Let’s look at its parameters.  The general form is:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;traverseWithin   startLocation    endLocation    someFunction;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The function &lt;em&gt;someFunction&lt;/em&gt; will be applied to every location between (and including) &lt;em&gt;startLocation&lt;/em&gt; and &lt;em&gt;endLocation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In our example, the &lt;em&gt;startLocation&lt;/em&gt; is (0,0,0) and the &lt;em&gt;endLocation&lt;/em&gt; is (4,0,4).  Let’s start by figuring out which locations are defined by these parameters.  We’ll look at each coordinate:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  * x goes 0 to 4: 0,1,2,3,4
  * y goes 0 to 0: 0
  * z goes 0 to 4: 0,1,2,3,4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can list all the locations as follows:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level5/traverseWithin03.png&quot; alt=&quot;traverseWithin space&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Another way to think about the set of locations is graphically.  We want all locations where &lt;em&gt;x&lt;/em&gt; is between 0 and 4, &lt;em&gt;y&lt;/em&gt; is 0, and &lt;em&gt;z&lt;/em&gt; is between 0 and 4.  Here is that space in the &lt;em&gt;x-z&lt;/em&gt; plane.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level5/traverseWithin02.jpg&quot; alt=&quot;traverseWithin space&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;So now that we know what space we’re working with, let’s turn our attention to the third parameter of the &lt;em&gt;traverseWithin&lt;/em&gt; function which is the name of another function.  In our example, this function is &lt;em&gt;xLessThan2&lt;/em&gt;. The function call:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;traverseWithin (0,0,0)  (4,0,4)  xLessThan2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;tells the computer to apply &lt;em&gt;xLessThan2&lt;/em&gt; to each location defined by the starting point (0,0,0) and the ending point (4,0,4).  We can go down our list of locations and see what the results are.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level5/traverseWithin04.png&quot; alt=&quot;traverseWithin space&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;We can also look at this graphically.  The condition &lt;em&gt;x&amp;lt;2&lt;/em&gt; is evaluated for each cell in the grid.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level5/traverseWithin05.png&quot; alt=&quot;traverseWithin space&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;example-2&quot;&gt;Example 2&lt;/h3&gt;

&lt;p&gt;Let’s look at another example using the same starting and ending locations, but with a different function.  Specifically, take a look at the code below.
&lt;a href=&quot; http://localhost:4000/assets/posts/level5/traverseWithin02.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open Level_5;

fun aLine (x, y, z) =
    if x = z then RED else BLACK;

build (5,1,5);

traverseWithin (0,0,0)  (4,0,4)  aLine;

show &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the set of locations that we’re traversing is the same as before, we can focus on the  function that will be applied to the coordinates of each location, &lt;em&gt;aLine&lt;/em&gt;. The function call:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;traverseWithin (0,0,0)  (4,0,4)  aLine;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;tells the computer to apply &lt;em&gt;aLine&lt;/em&gt; to each location defined by the starting point (0,0,0) and the ending point (4,0,4).  We can go down our list of locations and see what the results are.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level5/traverseWithin07.png&quot; alt=&quot;traverseWithin space&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Again, we can also look at this graphically.  The condition &lt;em&gt;x=z&lt;/em&gt; is evaluated for each cell in the grid.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level5/traverseWithin08.png&quot; alt=&quot;traverseWithin space&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;one-more-examplemake-our-own-circle-function&quot;&gt;One more example—make our own circle function!&lt;/h3&gt;

&lt;p&gt;Just to get a little crazy, let’s try to make our own circle function using &lt;em&gt;traverseWithin&lt;/em&gt;.  First, we have to know how to describe a circle mathematically.  See the figure below which includes information from &lt;a href=&quot;https://www.wolframalpha.com/input/?i=circle&quot;&gt;WolframAlpha&lt;/a&gt; and my annotations.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level5/traverseWithin09.jpg&quot; alt=&quot;circle specifications&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Our circle function will be very basic.  It will create a blue circle of radius 10 with center (12,15).  The part of the region outside circle will be yellow. 
&lt;a href=&quot; http://localhost:4000/assets/posts/level5/traverseWithin03.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open Level_5;

fun myBasicCircle (x, y, z) =
    if ((x-12)*(x-12) + (z-15)*(z-15) &amp;lt;= 10*10) then BLUE else YELLOW;

build (30,1,30);

traverseWithin (0,0,0)  (29,0,29)  myBasicCircle;

show &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following figure shows the locations processed by the &lt;em&gt;traverseWithin&lt;/em&gt; function and the corresponding values.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level5/traverseWithin10.png&quot; alt=&quot;circle specifications&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Output from running the code is shown in the following figure.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level5/traverseWithin11.png&quot; alt=&quot;circle specifications&quot; /&gt;
    
&lt;/figure&gt;</content><author><name>Betty Love</name></author><category term="functions," /><category term="level5" /><summary type="html">Topics on this page Topics on this page</summary></entry><entry><title type="html">User-Defined Function Example</title><link href="http://localhost:4000/function-example-01/" rel="alternate" type="text/html" title="User-Defined Function Example" /><published>2019-04-14T00:00:00-05:00</published><updated>2019-04-14T00:00:00-05:00</updated><id>http://localhost:4000/function-example-01</id><content type="html" xml:base="http://localhost:4000/function-example-01/">&lt;h4 class=&quot;notoc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#topics-on-this-page&quot; id=&quot;markdown-toc-topics-on-this-page&quot;&gt;Topics on this page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-1---code-to-create-one-artifact-at-00&quot; id=&quot;markdown-toc-step-1---code-to-create-one-artifact-at-00&quot;&gt;Step 1 - code to create one artifact at (0,0)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-2---code-to-create-one-artifact-at-an-arbitrary-location&quot; id=&quot;markdown-toc-step-2---code-to-create-one-artifact-at-an-arbitrary-location&quot;&gt;Step 2 - code to create one artifact at an arbitrary location&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-3---add-parameters-for-colors&quot; id=&quot;markdown-toc-step-3---add-parameters-for-colors&quot;&gt;Step 3 - add parameters for colors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#step-4---add-parameters-for-size&quot; id=&quot;markdown-toc-step-4---add-parameters-for-size&quot;&gt;Step 4 - add parameters for size&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;In this post we’ll write a function for creating an artifact like the one below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare01.png&quot; alt=&quot;Criss-cross square &quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;It will be based on parameters to define the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- location
- size 
- colors
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-1---code-to-create-one-artifact-at-00&quot;&gt;Step 1 - code to create one artifact at (0,0)&lt;/h3&gt;

&lt;p&gt;To make this step easier, let’s start with the prototype created in the bricklayer.org Grid app:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare02.png&quot; alt=&quot;Criss-cross square on grid&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The following code will create this artifact.
&lt;a href=&quot; http://localhost:4000/assets/posts/functions/crissCrossSquare01.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put2D (10,10) BLUE (0,0);
lineXZ (0,0) (9,9) YELLOW;
lineXZ (0,9) (9,0) YELLOW;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-2---code-to-create-one-artifact-at-an-arbitrary-location&quot;&gt;Step 2 - code to create one artifact at an arbitrary location&lt;/h3&gt;

&lt;p&gt;Let’s start by writing the code to create the artifact at (6,3).  The animation below illustrates how the coordinates of the artifact change as it moves from (0,0) to (6,3).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare04.gif&quot; alt=&quot;Criss-cross square animation&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Consider what is happening to the &lt;em&gt;x-coordinates&lt;/em&gt; of each of the blocks in the artifact as it is moved.  For example, the lower-left corner of the square starts at (0,0) and moves to the right until it gets to (6,0).  Along the way, it passed through (1,0), (2,0), (3,0), etc.  And what happens to the &lt;em&gt;z-coordinates&lt;/em&gt;?  They all stay the same until the artifact starts to move upward.  The lower-left corner goes from (6,0) to (6,1), (6,2), and then to (6,3).&lt;/p&gt;

&lt;p&gt;Let’s look at a different block, say, the upper right one that starts at (9,9). As the artifact moves the right, this block goes to (10,9), (11,9), (12,9), etc until it gets to (15,9).  Then it starts to move upward and goes to (15,10), (15,11), and finally (15,12).&lt;/p&gt;

&lt;p&gt;By moving the artifact from (0,0), to (6,3), we are &lt;em&gt;translating&lt;/em&gt; each block to the right by 6 and up by 3.  This means that if the coordinates of a block in the initial artifact were &lt;em&gt;(a,b)&lt;/em&gt;, in the new position, that block will be at &lt;em&gt;(a+6,b+3)&lt;/em&gt;.  Some examples:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (0,0) moved to (0+6,0+3) = (6,3)
- (9,9) moved to (9_6,9+3) = (15,12)
- (2,5) moved to (2+6,5+3) = (8,8)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I want to move the artifact to an arbitrary location, say, (xLoc,zLoc), I need to add &lt;em&gt;xLoc&lt;/em&gt; to the first coordinate of each block and &lt;em&gt;zLoc&lt;/em&gt; to the second coordinate of each block.  Examples:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (0,0) moves to (0+xLoc,0+zLoc)
- (9,9) moves to (9+xLoc,9+zLoc)
- (2,5) moves to (2+xLoc,5+zLoc)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Therefore my function to place a copy of the artifact at (xLoc,zLoc) would be as follows.
&lt;a href=&quot; http://localhost:4000/assets/posts/functions/crissCrossSquare02.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun crissCrossSquare (xLoc,zLoc) = 
(
    put2D (10,10) BLUE (0+xLoc,0+zLoc);
    lineXZ (0+xLoc,0+zLoc) (9+xLoc,9+zLoc) YELLOW;
    lineXZ (0+xLoc,9+zLoc) (9+xLoc,0+zLoc) YELLOW
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To place a copy at (6,3), use the function call:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crissCrossSquare (6,3);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output is as follows (red brick placed at (0,0) for reference)&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare07.png&quot; alt=&quot;Criss-cross square at (6,3)&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;step-3---add-parameters-for-colors&quot;&gt;Step 3 - add parameters for colors&lt;/h3&gt;

&lt;p&gt;Now suppose we’d like to create the criss-cross square artifact in different colors.  We need to specify a color for the square and a color for the lines.  Let’s call the color for the square &lt;em&gt;squareColor&lt;/em&gt; and the color for the lines &lt;em&gt;lineColor&lt;/em&gt;.  We’ll add these parameters to our function and substitute &lt;em&gt;squareColor&lt;/em&gt; for BLUE and &lt;em&gt;lineColor&lt;/em&gt; for YELLOW.  Now our function is as follows.
&lt;a href=&quot; http://localhost:4000/assets/posts/functions/crissCrossSquare03.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun crissCrossSquare (xLoc,zLoc,squareColor,lineColor) = 
(
    put2D (10,10) squareColor (0+xLoc,0+zLoc);
    lineXZ (0+xLoc,0+zLoc) (9+xLoc,9+zLoc) lineColor;
    lineXZ (0+xLoc,9+zLoc) (9+xLoc,0+zLoc) lineColor
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The following code places a blue and yellow copy at (0,0) and a pink and violet copy at (13,5)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crissCrossSquare (0,0,BLUE,YELLOW);
crissCrossSquare (13,5,PINK,VIOLET);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare09.png&quot; alt=&quot;Criss-cross squares&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;step-4---add-parameters-for-size&quot;&gt;Step 4 - add parameters for size&lt;/h3&gt;

&lt;p&gt;Now consider how we could modify our function so that we can create a copy of the artifact of an arbitrary size.  First let’s think about what that means.  Let’s go back to the initial code to create a criss-cross square at (0,0) and examine which parts of it relate to size. In the figure below, we see that clearly the size of the square depends on the size of the artifact.  Does anything else?&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare11.jpg&quot; alt=&quot;Criss-cross square code&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Yes!  The endpoints of the two lines are the corners of the square, so they will depend on the size of the square.
For a square of size 10 placed at (0,0), the endpoints of the two lines are:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - (0,0) and (9,9)
  - (0,9) and (9,0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How can we represent (9,9), (0,9) and (9,0) in terms of the size of the square (10 in this case)? How about the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - (0,0) and (10-1,10-1)
  - (0,10-1) and (10-1,0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So in general, for a square of size &lt;em&gt;squareSize&lt;/em&gt; placed at (0,0), the endpoints of the two lines would be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - (0,0)            and (squareSize-1,squareSize-1)
  - (0,squareSize-1) and (squareSize-1,0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we just need to &lt;em&gt;translate&lt;/em&gt; those coordinates to (&lt;em&gt;xLoc&lt;/em&gt;,&lt;em&gt;zLoc&lt;/em&gt;) as we did in Step 2 above.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  - (  0         ,   0        ) moves to (     0       + xLoc,      0       + zLoc)
  - (squareSize-1,squareSize-1) moves to (squareSize-1 + xLoc, squareSize-1 + zLoc)
  - (  0         ,squareSize-1) moves to (     0       + xLoc, squareSize-1 + zLoc)
  - (squareSize-1,   0        ) moves to (squareSize-1 + xLoc,      0       + zLoc)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Incorporating this into our function with a new parameter &lt;em&gt;squareSize&lt;/em&gt; yields the following.
&lt;a href=&quot; http://localhost:4000/assets/posts/functions/crissCrossSquare03.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun crissCrossSquare (xLoc,zLoc,squareColor,lineColor,squareSize) = 
(
    put2D (squareSize,squareSize) squareColor (0+xLoc,0+zLoc);
    lineXZ ( 0 + xLoc,      0       + zLoc) (squareSize-1 + xLoc, squareSize-1 + zLoc) lineColor;
    lineXZ ( 0 + xLoc, squareSize-1 + zLoc) (squareSize-1 + xLoc,      0       + zLoc) lineColor
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following code places a blue and yellow copy of size 10 at (0,0), a pink and violet copy of size 15 at (13,5), and a red and white copy of size 7 at (2,12).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crissCrossSquare ( 0,  0, BLUE, YELLOW, 10);
crissCrossSquare (13,  5, PINK, VIOLET, 15);
crissCrossSquare ( 2, 12, RED , WHITE ,  7);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/crissCrossSquare13.png&quot; alt=&quot;Criss-cross squares&quot; /&gt;
    
&lt;/figure&gt;</content><author><name>Betty Love</name></author><category term="functions" /><summary type="html">Topics on this page Topics on this page</summary></entry><entry><title type="html">A function to create a wire-frame box</title><link href="http://localhost:4000/wire-frame-box/" rel="alternate" type="text/html" title="A function to create a wire-frame box" /><published>2019-04-12T00:00:00-05:00</published><updated>2019-04-12T00:00:00-05:00</updated><id>http://localhost:4000/wire-frame-box</id><content type="html" xml:base="http://localhost:4000/wire-frame-box/">&lt;h4 class=&quot;notoc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#topics-on-this-page&quot; id=&quot;markdown-toc-topics-on-this-page&quot;&gt;Topics on this page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wire-frame-box-function&quot; id=&quot;markdown-toc-wire-frame-box-function&quot;&gt;Wire-frame box function&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#step-1-make-solid-box&quot; id=&quot;markdown-toc-step-1-make-solid-box&quot;&gt;Step 1: make solid box&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#step-2-empty-box-from-front-to-back&quot; id=&quot;markdown-toc-step-2-empty-box-from-front-to-back&quot;&gt;Step 2: empty box from front to back&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#step-3-empty-box-from-left-to-right&quot; id=&quot;markdown-toc-step-3-empty-box-from-left-to-right&quot;&gt;Step 3: empty box from left to right&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#step-4-empty-box-from-bottom-to-top&quot; id=&quot;markdown-toc-step-4-empty-box-from-bottom-to-top&quot;&gt;Step 4: empty box from bottom to top&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#patterns-and-symmetry-in-the-put-calls&quot; id=&quot;markdown-toc-patterns-and-symmetry-in-the-put-calls&quot;&gt;Patterns and symmetry in the &lt;em&gt;put&lt;/em&gt; calls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post we’ll write a function for creating a wire-frame box like this one.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/wireFrameBox08.png&quot; alt=&quot;Wire-frame box&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Where you see this icon,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl icon&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;click on it to download the associated bricklayer program.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;wire-frame-box-function&quot;&gt;Wire-frame box function&lt;/h3&gt;

&lt;p&gt;Our function will include parameters to control the size of the box (&lt;em&gt;xSize&lt;/em&gt;,&lt;em&gt;ySize&lt;/em&gt;,&lt;em&gt;zSize&lt;/em&gt;), the color of the box (&lt;em&gt;color&lt;/em&gt;), and the location of the box (&lt;em&gt;x&lt;/em&gt;,&lt;em&gt;y&lt;/em&gt;,&lt;em&gt;z&lt;/em&gt;).  To create our wire-frame box, we will first create a solid box, then use &lt;em&gt;EMPTY&lt;/em&gt; blocks to hollow out what we don’t want to keep.  Our progression will be as shown in the following figure.  The red and yellow blocks are added to provide reference points.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/wireFrameBox07.png&quot; alt=&quot;Wire-frame box sequence&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Only four &lt;em&gt;put&lt;/em&gt; function calls are needed to create a wire-frame box.  The general form of the function is as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun wireFrameBox (xSize,ySize,zSize,x,y,z,color) = 
(
(*
    put ...  &amp;lt;--- create solid box 
    put ...  &amp;lt;--- empty box from front to back 
    put ...  &amp;lt;--- empty box from left to right 
    put ...  &amp;lt;--- empty box vertically
*)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following code to place the red and yellow bricks for reference will also be included in the function, but will not be displayed henceforth in order to not detract from the main four &lt;em&gt;put&lt;/em&gt; calls.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(* Place red and yellow bricks for reference *)
    put (1,1,1) RED    (x,y,z);
    put (1,1,1) YELLOW (x+xSize-1,y+ySize-1,z+zSize-1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;step-1-make-solid-box&quot;&gt;Step 1: make solid box&lt;/h4&gt;

&lt;p&gt;Creating the initial solid box is the easiest step since we are given all the parameters we need for the corresponding &lt;em&gt;put&lt;/em&gt; function call. 
&lt;a href=&quot; http://localhost:4000/assets/posts/functions/wireFrameBox01.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun wireFrameBox (xSize,ySize,zSize,x,y,z,color) = 
(
    put (xSize,ySize,zSize) color (x,y,z);
(*
    put ...  &amp;lt;--- empty box from front to back 
    put ...  &amp;lt;--- empty box from left to right 
    put ...  &amp;lt;--- empty box vertically
*)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The function call&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wireFrameBox (14, 5, 10, 0, 0, 0, BLUE);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;produces the following artifact.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/wireFrameBox01.png&quot; alt=&quot;Solid block&quot; /&gt;
    
&lt;/figure&gt;

&lt;h4 id=&quot;step-2-empty-box-from-front-to-back&quot;&gt;Step 2: empty box from front to back&lt;/h4&gt;

&lt;p&gt;In this step we will determine the dimensions and location of the &lt;em&gt;put EMPTY&lt;/em&gt; call we need in order to empty the box from front to back.  Consider the figure below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/wireFrameBox03.jpg&quot; alt=&quot;Empty front to back&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The green rectangle marks the area  of the box that we want to remove all the way from front to back.  Since we want to leave the left and right sides of the box, the &lt;em&gt;x-dimension&lt;/em&gt; of the section to remove is &lt;em&gt;xSize-2&lt;/em&gt;.  Similarly, since we want to leave the top and bottom of the box, the &lt;em&gt;y-dimension&lt;/em&gt; of the section to remove is &lt;em&gt;ySize-2&lt;/em&gt;. And finally, since we want to remove this section from the front of the box to the back, the &lt;em&gt;z-dimension&lt;/em&gt; of the section to remove is the full &lt;em&gt;zSize&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So at this point we know the code we need looks like the following:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put (xSize-2,ySize-2,zSize) EMPTY (?, ?, ?)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We need to figure out the reference point (location) of this EMPTY block. As is shown in the figure above, the lower left corner of the green rectangle is one over and one up from the red block while the &lt;em&gt;z&lt;/em&gt; coordinate is the same as that of the red block.  Adding this to our &lt;em&gt;put&lt;/em&gt; call and inserting it into the function gives us this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun wireFrameBox (xSize,ySize,zSize,x,y,z,color) = 
(
    put (xSize,ySize,zSize) color (x,y,z);
    put (xSize-2,ySize-2,zSize) EMPTY (x+1,y+1,z)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The function call&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wireFrameBox (14, 5, 10, 0, 0, 0, BLUE);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;produces the following artifact.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/wireFrameBox04.png&quot; alt=&quot;Emptied front to back&quot; /&gt;
    
&lt;/figure&gt;

&lt;h4 id=&quot;step-3-empty-box-from-left-to-right&quot;&gt;Step 3: empty box from left to right&lt;/h4&gt;

&lt;p&gt;In this step we will determine the dimensions and location of the &lt;em&gt;put EMPTY&lt;/em&gt; call we need in order to empty the box from left to right.  Consider the figure below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/wireFrameBox08.jpg&quot; alt=&quot;Empty left to right&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The green rectangle marks the area  of the box that we want to remove all the way from left to right.  Since we want to leave the front and back frames of the box, the &lt;em&gt;z-dimension&lt;/em&gt; of the section to remove is &lt;em&gt;zSize-2&lt;/em&gt;.  Similarly, since we want to leave the top and bottom of the box, the &lt;em&gt;y-dimension&lt;/em&gt; of the section to remove is &lt;em&gt;ySize-2&lt;/em&gt;. And finally, since we want to remove this section from the left of the box to the right, the &lt;em&gt;x-dimension&lt;/em&gt; of the section to remove is the full &lt;em&gt;xSize&lt;/em&gt;. (Note that most of what we’re talking about removing has already been removed.   We could focus just on removing parts of the left and right sides of the box.  But that would take two &lt;em&gt;put&lt;/em&gt; calls and double the calculations that we need to do.  Therefore it’s simplest to approach it the same way we did the previous step.)&lt;/p&gt;

&lt;p&gt;So at this point we know the code we need looks like the following:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put (xSize,ySize-2,zSize-2) EMPTY (?, ?, ?)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We need to figure out the reference point (location) of this EMPTY block. As is shown in the figure above, the reference point is one back and one up from the red block while the &lt;em&gt;x&lt;/em&gt; coordinate is the same as that of the red block.  Adding this to our &lt;em&gt;put&lt;/em&gt; call and inserting it into the function gives us this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun wireFrameBox (xSize,ySize,zSize,x,y,z,color) = 
(
    put (xSize,ySize,zSize) color (x,y,z);
    put (xSize-2,ySize-2,zSize  ) EMPTY (x+1,y+1,z  )
    put (xSize  ,ySize-2,zSize-2) EMPTY (x,  y+1,z+1)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The function call&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wireFrameBox (14, 5, 10, 0, 0, 0, BLUE);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;produces the following artifact.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/wireFrameBox05.png&quot; alt=&quot;Emptied left to right&quot; /&gt;
    
&lt;/figure&gt;

&lt;h4 id=&quot;step-4-empty-box-from-bottom-to-top&quot;&gt;Step 4: empty box from bottom to top&lt;/h4&gt;

&lt;p&gt;The analysis for this step is the same as the previous two. The figure below illustrates the size and location of the EMPTY block that should be placed to clear the top and bottom of the box.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/wireFrameBox10.jpg&quot; alt=&quot;Empty vertically&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The following completed wireFrameBox function is as follows. 
&lt;a href=&quot; http://localhost:4000/assets/posts/functions/wireFrameBox04.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fun wireFrameBox (xSize,ySize,zSize,x,y,z,color) = 
(
    put (xSize,ySize,zSize) color (x,y,z);
    put (xSize-2,ySize-2,zSize  ) EMPTY (x+1,y+1,z  );
    put (xSize  ,ySize-2,zSize-2) EMPTY (x,  y+1,z+1);
    put (xSize-2,ySize  ,zSize-2) EMPTY (x+1,y,  z+1)
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The function call&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wireFrameBox (14, 5, 10, 0, 0, 0, BLUE);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;produces the following artifact.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/wireFrameBox06.png&quot; alt=&quot;Wire frame box&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;patterns-and-symmetry-in-the-put-calls&quot;&gt;Patterns and symmetry in the &lt;em&gt;put&lt;/em&gt; calls&lt;/h3&gt;

&lt;p&gt;Spend a few minutes studying the final version of the function.  Pay particular attention to the patterns that you see in both the size and the locations of the EMPTY blocks.  For example, each horizontal &lt;em&gt;size&lt;/em&gt; parameter is either &lt;em&gt;xSize&lt;/em&gt; or &lt;em&gt;xSize-2&lt;/em&gt; (same for the other two &lt;em&gt;size&lt;/em&gt; parameters).  Each horizontal location coordinate is either &lt;em&gt;x&lt;/em&gt; or &lt;em&gt;x+1&lt;/em&gt; (and same for the other two location parameters).  Many times you can eliminate a little of the work in writing a function like this simply by taking note of such patterns.&lt;/p&gt;</content><author><name>Betty Love</name></author><category term="level4," /><category term="functions" /><summary type="html">Topics on this page Topics on this page</summary></entry><entry><title type="html">Getting Started with Functions</title><link href="http://localhost:4000/intro-to-functions/" rel="alternate" type="text/html" title="Getting Started with Functions" /><published>2019-03-25T00:00:00-05:00</published><updated>2019-03-25T00:00:00-05:00</updated><id>http://localhost:4000/intro-to-functions</id><content type="html" xml:base="http://localhost:4000/intro-to-functions/">&lt;h4 class=&quot;no_toc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#placing-the-same-figure-in-multiple-locations&quot; id=&quot;markdown-toc-placing-the-same-figure-in-multiple-locations&quot;&gt;Placing the same figure in multiple locations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post we’ll explore how to create our own functions. So far we’ve used functions that come with Bricklayer.  These include &lt;em&gt;put2D&lt;/em&gt;, &lt;em&gt;put&lt;/em&gt;, &lt;em&gt;lineXZ&lt;/em&gt;, &lt;em&gt;circleXZ&lt;/em&gt;, and &lt;em&gt;sphere&lt;/em&gt;. These are referred to as &lt;em&gt;built-in&lt;/em&gt; functions.  We’ll learn how to create our own functions which are known as &lt;em&gt;user-defined&lt;/em&gt; functions (we are &lt;em&gt;users&lt;/em&gt; and &lt;em&gt;defining&lt;/em&gt; our own functions).&lt;/p&gt;

&lt;p&gt;The primary reason to create your own functions is so that you can use that code multiple times without having to rewrite it each time.  Suppose there was no &lt;em&gt;circleXZ&lt;/em&gt; function. To create a circle, you’d have to write a lot of &lt;em&gt;put&lt;/em&gt; function calls and it would get complicated quickly.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;placing-the-same-figure-in-multiple-locations&quot;&gt;Placing the same figure in multiple locations&lt;/h3&gt;

&lt;p&gt;Suppose we want to write a bricklayer program to create the following figure.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/functions01.png&quot; alt=&quot;Functions01&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The Level_3 code to create the figure at (0,0) is as follows.
&lt;a href=&quot; http://localhost:4000/assets/posts/functions/functions01.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put2D  (2,4)  BLUE    (0,0);
put2D  (3,3)  RED     (2,0);
put2D  (2,3)  YELLOW  (0,4);
put2D  (3,4)  GREEN   (2,3);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s write the code to place the other figures.  One way to do this is to look at the grid and use the labels on the rows and columns to get the coordinates for each of the blue, red, yellow, and green blocks.  For the figure at (14,0), the blue one is at (14,0), the red at (16,0), yellow at (14,4), and green at (16,3). For the figure at (7,6), the blue one is at (7,6), the red at (9,6), yellow at (7,10), and green at (9,9).  We could do this for each of the figures.  Following is the code to create all six figures.
 &lt;a href=&quot; http://localhost:4000/assets/posts/functions/functions02.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(* Figure at (0,0) *)
put2D  (2,4)  BLUE    (  0 ,  0 );
put2D  (3,3)  RED     (  2 ,  0 );
put2D  (2,3)  YELLOW  (  0 ,  4 );
put2D  (3,4)  GREEN   (  2 ,  3 );

(* Figure at (14,0) *)
put2D  (2,4)  BLUE    ( 14 ,  0 );
put2D  (3,3)  RED     ( 16 ,  0 );
put2D  (2,3)  YELLOW  ( 14 ,  4 );
put2D  (3,4)  GREEN   ( 16 ,  3 );

(* Figure at (7,6) *)
put2D  (2,4)  BLUE    (  7 ,  6 );
put2D  (3,3)  RED     (  9 ,  6 );
put2D  (2,3)  YELLOW  (  7 , 10 );
put2D  (3,4)  GREEN   (  9 ,  9 );

(* Figure at (4,15) *)
put2D  (2,4)  BLUE    (  4 , 15 );
put2D  (3,3)  RED     (  6 , 15 );
put2D  (2,3)  YELLOW  (  4 , 19 );
put2D  (3,4)  GREEN   (  6 , 18 );

(* Figure at (13,13) *)
put2D  (2,4)  BLUE    ( 13 , 13 );
put2D  (3,3)  RED     ( 15 , 13 );
put2D  (2,3)  YELLOW  ( 13 , 17 );
put2D  (3,4)  GREEN   ( 15 , 16 );

(* Figure at (20,11) *)
put2D  (2,4)  BLUE    ( 20 , 11 );
put2D  (3,3)  RED     ( 22 , 11 );
put2D  (2,3)  YELLOW  ( 20 , 15 );
put2D  (3,4)  GREEN   ( 22 , 14 );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That gets tedious fast!  Suppose that instead of six of these figures, you wanted to place 20? Or 100? You’d want an easier way!  The key is to notice that the relative position of the red block to the blue block and the green block to the blue block, etc. does not change.  So if the blue block moves over 4 and up 15, so does the red block and the green block and the yellow block.  So whatever we add to the coordinates of the blue block, we do the same to the coordinates of the other blocks.  Take a look at the following graphic to understand this better.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/functions02.jpg&quot; alt=&quot;Functions02&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Based on this analysis, we can rewrite our program as follows (yes, it looks even more tedious, but it will be worth it!).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/functions/functions03.png&quot; alt=&quot;Functions03&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Now that we can see the patterns in the code, we can create a function that does the work for us.  The following function places a copy of the figure at location (x,z).
 &lt;a href=&quot; http://localhost:4000/assets/posts/functions/functions03.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open Level_3;

fun myfigure ( x, z ) =
(
    put2D  (2,4)  BLUE    (  x + 0,  z + 0 );
    put2D  (3,3)  RED     (  x + 2,  z + 0 );
    put2D  (2,3)  YELLOW  (  x + 0,  z + 4 );
    put2D  (3,4)  GREEN   (  x + 2,  z + 3 )
);
 
build2D (30,30);

myfigure ( 0,  0);      (* figure at ( 0,  0) *)
myfigure (14,  0);      (* figure at (14,  0) *)
myfigure ( 7,  6);      (* figure at ( 7,  6) *)
myfigure ( 4, 15);      (* figure at ( 4, 15) *)
myfigure (13, 13);      (* figure at (13, 13) *)
myfigure (20, 11);      (* figure at (20, 11) *)

show2D &quot;my blocks&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Betty Love</name></author><category term="functions" /><summary type="html">Topics on this page</summary></entry><entry><title type="html">Rings and Cylinders</title><link href="http://localhost:4000/rings-cylinders/" rel="alternate" type="text/html" title="Rings and Cylinders" /><published>2019-03-11T00:00:00-05:00</published><updated>2019-03-11T00:00:00-05:00</updated><id>http://localhost:4000/rings-cylinders</id><content type="html" xml:base="http://localhost:4000/rings-cylinders/">&lt;h4 class=&quot;no_toc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#level_4-documentation&quot; id=&quot;markdown-toc-level_4-documentation&quot;&gt;Level_4 Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rings-in-2d&quot; id=&quot;markdown-toc-rings-in-2d&quot;&gt;Rings in 2D&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rings-in-3d&quot; id=&quot;markdown-toc-rings-in-3d&quot;&gt;Rings in 3D&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post we’ll investigate how to create rings and cylinders in Bricklayer Level_4.  For an introduction to Level_4 programming, check out &lt;a href=&quot;/getting-started-with-level4&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where you see this icon,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl icon&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;click on it to download the associated bricklayer program.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;level_4-documentation&quot;&gt;Level_4 Documentation&lt;/h3&gt;

&lt;p&gt;The official documentation for Level_4 functions is found on the &lt;a href=&quot;https://bricklayer.org&quot;&gt;bricklayer website&lt;/a&gt; by selecting Apps -&amp;gt; Bricklayer -&amp;gt; Level 4 Document or through this &lt;a href=&quot;https://bricklayer.org/level-4-document/&quot;&gt;direct link&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;rings-in-2d&quot;&gt;Rings in 2D&lt;/h3&gt;
&lt;p&gt;Before discussing 3D rings, let’s review the idea of a ring in 2D. A ring is defined by its radius, thickness, color, and location.  These are the parameters for the &lt;em&gt;ringXZ&lt;/em&gt; function. Consider the following code in Level_3 and its output.
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/ringX01.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(* ringXZ radius thickness color location *)
ringXZ 10  1  BLUE  (15,25);
ringXZ 10  4  RED   (40,25);
ringXZ 20 10  GREEN (75,25);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/ring01.png&quot; alt=&quot;Rings in Level_3&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;rings-in-3d&quot;&gt;Rings in 3D&lt;/h3&gt;
&lt;p&gt;Rings in 3D are analogous to rings in 2D with one exception: the length of the ring.  Essentially rings in 3D are cylinders.  To create a cylinder, we need to know its radius, thickness (of its walls), color, and location.  But we also need to know its orientation: is it standing up?  laying down? laying down front to back or side to side?&lt;/p&gt;</content><author><name>Betty Love</name></author><category term="level4," /><category term="3D," /><category term="cylinder," /><category term="ring," /><category term="ringX," /><category term="ringY," /><category term="ringZ," /><category term="level" /><category term="4," /><category term="level_4," /><category term="hollowCylinder" /><summary type="html">Topics on this page</summary></entry><entry><title type="html">Spheres in Bricklayer</title><link href="http://localhost:4000/spheres/" rel="alternate" type="text/html" title="Spheres in Bricklayer" /><published>2019-03-01T00:00:00-06:00</published><updated>2019-03-01T00:00:00-06:00</updated><id>http://localhost:4000/spheres</id><content type="html" xml:base="http://localhost:4000/spheres/">&lt;h4 class=&quot;no_toc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#sphere-functions-in-bricklayer-level-4&quot; id=&quot;markdown-toc-sphere-functions-in-bricklayer-level-4&quot;&gt;Sphere functions in Bricklayer Level 4&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#bricklayer-sphere-function&quot; id=&quot;markdown-toc-bricklayer-sphere-function&quot;&gt;Bricklayer &lt;em&gt;sphere&lt;/em&gt; function&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#list-of-colors&quot; id=&quot;markdown-toc-list-of-colors&quot;&gt;List of colors?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bricklayer-hollowsphere-function&quot; id=&quot;markdown-toc-bricklayer-hollowsphere-function&quot;&gt;Bricklayer &lt;em&gt;hollowSphere&lt;/em&gt; function&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post we’ll explore spheres in Bricklayer Level 4.  For an introduction to programming in the  Level 4, check out &lt;a href=&quot;/getting-started-with-level4&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where you see this icon,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl icon&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;click on it to download the associated bricklayer program.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;sphere-functions-in-bricklayer-level-4&quot;&gt;Sphere functions in Bricklayer Level 4&lt;/h3&gt;

&lt;p&gt;Bricklayer has two sphere functions: &lt;em&gt;sphere&lt;/em&gt; and &lt;em&gt;hollowSphere&lt;/em&gt;. Official documentation on these and other Level-4 functions is available at &lt;a href=&quot;https://bricklayer.org&quot;&gt;bricklayer.org&lt;/a&gt; (Apps -&amp;gt; Bricklayer -&amp;gt; Level 4 - Document).  In this post, we’ll start with the &lt;em&gt;sphere&lt;/em&gt; function.&lt;/p&gt;

&lt;h4 id=&quot;bricklayer-sphere-function&quot;&gt;Bricklayer &lt;em&gt;sphere&lt;/em&gt; function&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;sphere&lt;/em&gt; function produces a sphere (duh!), i.e., a ball.  This is a 3D artifact. To create a sphere, we need to know three things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;how big it should be&lt;/li&gt;
  &lt;li&gt;what color(s) it should be&lt;/li&gt;
  &lt;li&gt;where it should be&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These three things define the parameters for the &lt;em&gt;sphere&lt;/em&gt; function. Specifically, the parameters are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;radius&lt;/li&gt;
  &lt;li&gt;a list of colors, written as [color1,color2,etc]&lt;/li&gt;
  &lt;li&gt;the center, written as a location in 3D space&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;em&gt;sphere&lt;/em&gt; command looks like:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere radius [color1,color2,etc] (x,y,z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The following command creates a blue sphere with radius 10 with center (15,15,15):
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere01.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 10 [BLUE] (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere01.png&quot; alt=&quot;Blue sphere&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Let’s put three side-by-side (radii 5, 10, and 15) for perspective.
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere02.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 5  [BLUE] (10,20,20);
sphere 10 [BLUE] (30,20,20);
sphere 15 [BLUE] (60,20,20);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere02.png&quot; alt=&quot;Three blue spheres&quot; /&gt;
    
&lt;/figure&gt;

&lt;h4 id=&quot;list-of-colors&quot;&gt;List of colors?&lt;/h4&gt;
&lt;p&gt;Let’s explore what happens when we have more than one color in our list of colors. I’ll change up our three spheres as follows. &lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere03.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 5  [BLUE,YELLOW] (10,20,20);
sphere 10 [RED, GREEN] (30,20,20);
sphere 15 [PINK, VIOLET] (60,20,20);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere03.png&quot; alt=&quot;Three bi-color spheres&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;But we’re not limited to just two colors.  You can include as many as you’d like.  Here’s one with three colors. &lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere04.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 10 [RED,ORANGE,YELLOW] (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere04.png&quot; alt=&quot;A red, orange, and yellow sphere&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;At this point if you’ve been running the .bl files yourself, you may have noticed that as your artifacts include more bricks, it can take longer for your computer to display them. It is easy to generate a lot of bricks when creating spheres.  In fact, we can look at the output in the bricklayer console window to see how many bricks are in an artifact.  The screenshot below shows how to look for this (first scroll to the bottom of the console window, then up until you see this part).  Notice that our red, orange, and yellow sphere is made up of 4,945 bricks!&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere05.png&quot; alt=&quot;A red, orange, and yellow sphere&quot; /&gt;
    
&lt;/figure&gt;

&lt;h4 id=&quot;bricklayer-hollowsphere-function&quot;&gt;Bricklayer &lt;em&gt;hollowSphere&lt;/em&gt; function&lt;/h4&gt;
&lt;p&gt;The &lt;em&gt;hollowSphere&lt;/em&gt; function provides a way to create the same look as the &lt;em&gt;sphere&lt;/em&gt; command without all the inner bricks that one cannot see.  The parameters are the same except for one additional parameter for &lt;em&gt;hollowSphere&lt;/em&gt; to indicate the thickness of the surface of the sphere.  The maximum value for this is 10 and it yields a sphere that looks exactly like the output from the &lt;em&gt;sphere&lt;/em&gt; command, but with the unseen bricks deleted.  This allows us to create larger spheres without slowing down the computer too much.&lt;/p&gt;

&lt;p&gt;The general form of the &lt;em&gt;hollowSphere&lt;/em&gt; command is:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hollowSphere radius thickness [colors] location;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I’ll create a sphere that looks like the previous one using &lt;em&gt;hollowSphere&lt;/em&gt; with a thickness of 10. 
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere05.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hollowSphere 10 10 [RED,ORANGE,YELLOW] (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere06.png&quot; alt=&quot;Hollow sphere with thickness 10&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Now let’s check the bricklayer console to see how many bricks are in this one.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere07.png&quot; alt=&quot;A red, orange, and yellow sphere&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;2392 bricks in the hollow sphere vs. 4945 in the solid sphere.  Using &lt;em&gt;hollowSphere&lt;/em&gt; allows us to create larger spheres with no change in appearance from the outside of the sphere.&lt;/p&gt;

&lt;p&gt;What if we used a smaller value for the thickness?  Let’s try 5! &lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere06.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hollowSphere 10 5 [RED,ORANGE,YELLOW] (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere08.png&quot; alt=&quot;Hollow sphere with thickness 5&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The outside of the sphere is not solid now.  Let’s try thickness = 1. 
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere07.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hollowSphere 10 1 [RED,ORANGE,YELLOW] (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere09.png&quot; alt=&quot;Hollow sphere with thickness 5&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;As the thickness decreases, the number of visible bricks on the outside of the sphere also decreases.&lt;/p&gt;</content><author><name>Betty Love</name></author><category term="level4," /><category term="3D," /><category term="sphere" /><summary type="html">Topics on this page</summary></entry><entry><title type="html">Slicing Spheres in Bricklayer to See Inside!</title><link href="http://localhost:4000/slicing-spheres/" rel="alternate" type="text/html" title="Slicing Spheres in Bricklayer to See Inside!" /><published>2019-03-01T00:00:00-06:00</published><updated>2019-03-01T00:00:00-06:00</updated><id>http://localhost:4000/slicing-spheres</id><content type="html" xml:base="http://localhost:4000/slicing-spheres/">&lt;h4 class=&quot;no_toc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#spheres-inside-spheres&quot; id=&quot;markdown-toc-spheres-inside-spheres&quot;&gt;Spheres inside spheres&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#circles-inside-circles&quot; id=&quot;markdown-toc-circles-inside-circles&quot;&gt;Circles inside circles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#back-to-spheres-inside-spheres&quot; id=&quot;markdown-toc-back-to-spheres-inside-spheres&quot;&gt;Back to spheres inside spheres&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#slice-horizontally-perpendicular-to-y-axis&quot; id=&quot;markdown-toc-slice-horizontally-perpendicular-to-y-axis&quot;&gt;Slice horizontally (perpendicular to &lt;em&gt;y&lt;/em&gt; axis)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#slice-perpendicular-to-the-z-axis&quot; id=&quot;markdown-toc-slice-perpendicular-to-the-z-axis&quot;&gt;Slice perpendicular to the &lt;em&gt;z&lt;/em&gt; axis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post we’ll explore slicing spheres in order to see inside them.  For an introduction to spheres, check out &lt;a href=&quot;/spheres&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where you see this icon,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl icon&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;click on it to download the associated bricklayer program.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;spheres-inside-spheres&quot;&gt;Spheres inside spheres&lt;/h3&gt;

&lt;p&gt;What happens if we create a sphere inside a sphere in bricklayer?  Well, let’s find out!
Let’s start with a single sphere with radius 10.
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere08.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 10 [BLUE] (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere10.png&quot; alt=&quot;Blue sphere with radius 10&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Now let’s put a smaller sphere at the same location (having the same center).  I’ll give this one a radius of 7 and make it red.
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere09.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 10 [BLUE]  (15,15,15);
sphere  7 [RED]  (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere10.png&quot; alt=&quot;Blue sphere with radius 10&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Hmmm…where’s the white sphere???&lt;/p&gt;

&lt;h3 id=&quot;circles-inside-circles&quot;&gt;Circles inside circles&lt;/h3&gt;

&lt;p&gt;We can’t see it because it’s inside the blue sphere.  I’m going to slice this artifact in half so we can see the middle.  How can I do that? First we need to understand the location of the boundaries of the sphere. The image below shows a cross section of the sphere at its center. I created this in the bricklayer &lt;a href=&quot;https://bricklayer.org/apps/grid_lite/grid.html&quot;&gt;Grid app&lt;/a&gt;, then marked it up on my ipad.  (I highly recommend using the Grid app to map out artifacts.) I did this analysis so that I could  come up with the coordinates of the yellow bounding square (which we’ll use to create a yellow bounding box).  Note that I could have used trial and error, but some times it’s difficult to know if you cut off part of a circle.  I also wanted to demonstrate this process.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere11.jpg&quot; alt=&quot;Blue sphere with radius 10&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Based on these calculations, we can write a Level_3 bricklayer program to create this.  You should look at each of the following commands and make sure you understand how to come up with the parameters used in each.
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere10.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put2D (23,23) YELLOW (4,4);
put2D (21,21) EMPTY  (5,5);

circleXZ 10  BLUE  (15,15);
circleXZ  6  RED   (15,15);

put2D (1,1)   BLACK (15,15);
put2D (10,1)  WHITE (16,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s a look at the real artifact.  I put the white blocks in so that it’s easier to confirm that the radius of the blue circle is 10 and the red circle is 6.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere12.jpg&quot; alt=&quot;Blue sphere with radius 10&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;If I wanted to slice the circle in half and only see half of it, say the right half, then I can place a big empty block to cover the part that I don’t want to be visible.  There’s a bit of a problem with slicing the circle in &lt;em&gt;half&lt;/em&gt;.  Can you think about what that problem is?  Hint: is the diameter of a circle even or odd?&lt;/p&gt;

&lt;p&gt;Take a closer look at our artifact.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere13.jpg&quot; alt=&quot;Radius 10, diameter 21&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Our blue circle has radius 10, but its diameter is 21 because of the center block.  In general, we have the following relationship between the radius and diameter of a circle artifact:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;diameter = (2 x radius) + 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since 2 times any number is always even, adding 1 makes it odd, so the diameter of a circle in bricklayer is always odd.  What is half an odd number?  Not a whole number!  So what does half a circle mean?  One half will include the center point and one half will not.  For our purposes, I’ll leave the center point in the half that will be displayed.&lt;/p&gt;

&lt;p&gt;The following image shows my calculations for what size EMPTY block I need and where it needs to go.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere14.jpg&quot; alt=&quot;Calculate dimensions and location of EMPTY block&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;I’ll edit the code to remove the yellow frame and the left “half” of the circle. 
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere11.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;circleXZ 10  BLUE  (15,15);
circleXZ  6  RED   (15,15);

put2D (1,1)   BLACK (15,15);
put2D (10,1)  WHITE (16,15);

put2D (10,21) EMPTY (5,5);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s the artifact produced by this code.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere15.png&quot; alt=&quot;Half a circle&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;back-to-spheres-inside-spheres&quot;&gt;Back to spheres inside spheres&lt;/h3&gt;

&lt;p&gt;Now that we understand slicing a circle, we can extend that knowledge to slicing a sphere.  Let’s go back to our red sphere inside a blue sphere. I’m going to add a set of axes to our artifact so that it’s easier to get our bearings.  The following code generates the axes and our red sphere inside a blue sphere.&lt;br /&gt;
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere12.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;put (30,1,1) WHITE  (0,0,0);   (* x axis *)
put (1,30,1) PINK   (0,0,0);   (* y axis *)
put (1,1,30) BLACK  (0,0,0);   (* z axis *)
put (1,1,1)  YELLOW (0,0,0);   (* origin *)


sphere 10  [BLUE]  (15,15,15);
sphere  7  [RED]   (15,15,15);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The resulting artifact is the following.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere16.png&quot; alt=&quot;3D axes and spheres&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;There are many ways that we could slice the sphere in (almost) half (recall that the diameter of a sphere, just like that of a circle, is an odd number, so half of it is not a whole number). Let’s first figure out how to chop off the left side. You can envision this as a knife slicing through the middle of the sphere from &lt;em&gt;z=0&lt;/em&gt; to &lt;em&gt;z=30&lt;/em&gt;.  Although our sphere is not that big, we won’t worry about that right now.  We’ll just slice through some air!! The following image illustrates this idea.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere17.jpg&quot; alt=&quot;Slice sphere&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Our approach will be to place a giant EMPTY block on the left side.  The center of the sphere in the &lt;em&gt;x&lt;/em&gt; direction (white axis) is at &lt;em&gt;x=15&lt;/em&gt;. We need to back up one unit so that we don’t chop off the layer of the sphere here.  Since our sphere is the only artifact we’re working with, we don’t have to be precise in determining the size of the EMPTY block.  The easy way is to locate the block at (0,0,0) and make it go to the build-space size in the &lt;em&gt;y&lt;/em&gt; and &lt;em&gt;z&lt;/em&gt; directions.  The only hard part is to figure out how far to go in the &lt;em&gt;x&lt;/em&gt; direction. Given our analysis above, we want to zap through &lt;em&gt;x=14&lt;/em&gt; which means our EMPTY block should be of size 15 in the &lt;em&gt;x&lt;/em&gt; direction.  Following is code that puts a giant YELLOW block there instead of EMPTY just to give a visual on what this block really looks like. 
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere13.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 10  [BLUE]  (15,15,15);
sphere  7  [RED]   (15,15,15);

put (15,30,30) YELLOW (0,0,0);  (* giant yellow block *)

(* place axes last *)
put (30,1,1) WHITE  (0,0,0);   (* x axis *)
put (1,30,1) PINK   (0,0,0);   (* y axis *)
put (1,1,30) BLACK  (0,0,0);   (* z axis *)
put (1,1,1)  YELLOW (0,0,0);   (* origin *)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output is shown in the following image.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere18.jpg&quot; alt=&quot;Slice sphere with giant yellow block&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;Note that we sliced it correctly since the sphere has radius 10 and we can see the 10 layers plus the center layer.  So now…let’s put an EMPTY block there instead of YELLOW.  I also put a 1x1x1 white block at the center of the sphere just to make sure I wasn’t chopping that layer off. 
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere14.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 10  [BLUE]  (15,15,15);
sphere  7  [RED]   (15,15,15);

put (1,1,1) WHITE (15,15,15);  (* white block at center *)

put (15,30,30) EMPTY (0,0,0);  (* giant empty block *)

(* place axes last *)
put (30,1,1) WHITE  (0,0,0);   (* x axis *)
put (1,30,1) PINK   (0,0,0);   (* y axis *)
put (1,1,30) BLACK  (0,0,0);   (* z axis *)
put (1,1,1)  YELLOW (0,0,0);   (* origin *)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output is shown in the following image where we can see the cross-section of the red sphere inside the blue one as well as the white center block.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere19.png&quot; alt=&quot;Slice sphere with giant empty block&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;slice-horizontally-perpendicular-to-y-axis&quot;&gt;Slice horizontally (perpendicular to &lt;em&gt;y&lt;/em&gt; axis)&lt;/h3&gt;

&lt;p&gt;Suppose that instead of slicing vertically across the &lt;em&gt;x&lt;/em&gt; axis as we just did, we want to slice horizontally so that we can look down into the remaining “half”.  Let’s think about how to do that.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere20.jpg&quot; alt=&quot;Slice sphere perpendicular to y axis&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;As the figure above shows, we want to empty out everything above the &lt;em&gt;y=15&lt;/em&gt; plane, i.e., everything above and including the &lt;em&gt;y=16&lt;/em&gt; plane. This means we need an EMPTY block that is size &lt;em&gt;(30,14,30)&lt;/em&gt; to go at location &lt;em&gt;(0,16,0)&lt;/em&gt;.  Let’s think about these values.  As shown in the image, we start the EMPTY block at &lt;em&gt;y=16&lt;/em&gt; and if we extend it to the maximum value of &lt;em&gt;y&lt;/em&gt;, which is 29, then the EMPTY block needs to have height &lt;em&gt;14 = 29-16+1&lt;/em&gt;.  The code is as follows. 
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere15.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 10  [BLUE]  (15,15,15);
sphere  7  [RED]   (15,15,15);

put (1,1,1) WHITE (15,15,15);  (* white block at center *)

put (30,14,30) EMPTY (0,16,0);  (* giant empty block *)

(* place axes last *)
put (30,1,1) WHITE  (0,0,0);   (* x axis *)
put (1,30,1) PINK   (0,0,0);   (* y axis *)
put (1,1,30) BLACK  (0,0,0);   (* z axis *)
put (1,1,1)  YELLOW (0,0,0);   (* origin *)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The resulting artifact follows.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere21.png&quot; alt=&quot;Sliced sphere perpendicular to y axis&quot; /&gt;
    
&lt;/figure&gt;

&lt;h3 id=&quot;slice-perpendicular-to-the-z-axis&quot;&gt;Slice perpendicular to the &lt;em&gt;z&lt;/em&gt; axis&lt;/h3&gt;
&lt;p&gt;Now suppose we want to slice the sphere so that we can see the center when looking from the front (across the &lt;em&gt;x&lt;/em&gt; axis).  Consider the following image and think about what the size and location of the EMPTY block should be.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere22.jpg&quot; alt=&quot;How to slic perpendicular to z axis&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;This is analogous to our first slice which took away the left part of the sphere when viewing from across the &lt;em&gt;x&lt;/em&gt; axis.  The code is as follows (compare it to the first slice).
&lt;a href=&quot; http://localhost:4000/assets/posts/level4/sphere16.bl &quot;&gt;
&lt;img src=&quot;http://localhost:4000/assets/posts/dot-bl.png&quot; alt=&quot;.bl file&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sphere 10  [BLUE]  (15,15,15);
sphere  7  [RED]   (15,15,15);

put (1,1,1) WHITE (15,15,15);  (* white block at center *)

put (30,30,15) EMPTY (0,0,0);  (* giant empty block *)

(* place axes last *)
put (30,1,1) WHITE  (0,0,0);   (* x axis *)
put (1,30,1) PINK   (0,0,0);   (* y axis *)
put (1,1,30) BLACK  (0,0,0);   (* z axis *)
put (1,1,1)  YELLOW (0,0,0);   (* origin *)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The artifact produced is as follows.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/sphere23.png&quot; alt=&quot;Sliced sphere perpendicular to z axis&quot; /&gt;
    
&lt;/figure&gt;</content><author><name>Betty Love</name></author><category term="level4," /><category term="3D," /><category term="sphere" /><summary type="html">Topics on this page</summary></entry><entry><title type="html">Getting Started with Bricklayer Level 4</title><link href="http://localhost:4000/getting-started-with-level4/" rel="alternate" type="text/html" title="Getting Started with Bricklayer Level 4" /><published>2019-02-21T00:00:00-06:00</published><updated>2019-02-21T00:00:00-06:00</updated><id>http://localhost:4000/getting-started-with-level4</id><content type="html" xml:base="http://localhost:4000/getting-started-with-level4/">&lt;h4 class=&quot;no_toc&quot; id=&quot;topics-on-this-page&quot;&gt;Topics on this page&lt;/h4&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#coordinates-in-3d-space&quot; id=&quot;markdown-toc-coordinates-in-3d-space&quot;&gt;Coordinates in 3D space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Level 4 in Bricklayer opens up the world of 3D artifacts!  To create and run a Level_4 program, you must use the Bricklayer app (not Bricklayer-Lite).  For an introduction to programming in the Bricklayer app, check out &lt;a href=&quot;/getting-started-with-bricklayer&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;coordinates-in-3d-space&quot;&gt;Coordinates in 3D space&lt;/h3&gt;

&lt;p&gt;Let’s start with a review of 2D coordinates in Bricklayer.  When programming in 2D, artifacts are placed in the x-z plane.  The point (x,z) is x units in the horizontal direction from 0 and z units in the vertical direction from 0.  Consider the figure below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/level4-01.jpg&quot; alt=&quot;Horizontal and vertical coordinates&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;As we move to 3D, we (visually) lay the x-z plane flat, so the above artifact would be viewed as follows.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/level4-02.jpg&quot; alt=&quot;x-z plane laid flat&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;We think of x as the &lt;em&gt;width&lt;/em&gt; of the artifact and z as the &lt;em&gt;depth&lt;/em&gt;.  The third dimension, which we’ll label as &lt;em&gt;y&lt;/em&gt;, is the height.  In the artifact above, the height is one.  Below is the same artifact with second layer the same size as the first added.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/level4-03.jpg&quot; alt=&quot;3D artifact&quot; /&gt;
    
&lt;/figure&gt;

&lt;p&gt;The code to create this artifact is shown below.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://localhost:4000/assets/posts/level4/level4-04.png&quot; alt=&quot;Code for 3D artifact&quot; /&gt;
    
&lt;/figure&gt;</content><author><name>Betty Love</name></author><category term="level4," /><category term="3D" /><summary type="html">Topics on this page</summary></entry></feed>